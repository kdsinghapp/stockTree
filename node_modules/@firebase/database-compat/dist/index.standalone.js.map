{"version":3,"file":"index.standalone.js","sources":["../../../node_modules/safe-buffer/index.js","../../../node_modules/websocket-driver/lib/websocket/streams.js","../../../node_modules/websocket-driver/lib/websocket/driver/headers.js","../../../node_modules/websocket-driver/lib/websocket/driver/stream_reader.js","../../../node_modules/websocket-driver/lib/websocket/driver/base.js","../../../node_modules/http-parser-js/http-parser.js","../../../node_modules/websocket-driver/lib/websocket/http_parser.js","../../../node_modules/websocket-extensions/lib/parser.js","../../../node_modules/websocket-extensions/lib/pipeline/ring_buffer.js","../../../node_modules/websocket-extensions/lib/pipeline/functor.js","../../../node_modules/websocket-extensions/lib/pipeline/pledge.js","../../../node_modules/websocket-extensions/lib/pipeline/cell.js","../../../node_modules/websocket-extensions/lib/pipeline/index.js","../../../node_modules/websocket-extensions/lib/websocket_extensions.js","../../../node_modules/websocket-driver/lib/websocket/driver/hybi/frame.js","../../../node_modules/websocket-driver/lib/websocket/driver/hybi/message.js","../../../node_modules/websocket-driver/lib/websocket/driver/hybi.js","../../../node_modules/websocket-driver/lib/websocket/driver/proxy.js","../../../node_modules/websocket-driver/lib/websocket/driver/client.js","../../../node_modules/websocket-driver/lib/websocket/driver/draft75.js","../../../node_modules/websocket-driver/lib/websocket/driver/draft76.js","../../../node_modules/websocket-driver/lib/websocket/driver/server.js","../../../node_modules/websocket-driver/lib/websocket/driver.js","../../../node_modules/faye-websocket/lib/faye/websocket/api/event.js","../../../node_modules/faye-websocket/lib/faye/websocket/api/event_target.js","../../../node_modules/faye-websocket/lib/faye/websocket/api.js","../../../node_modules/faye-websocket/lib/faye/websocket/client.js","../../../node_modules/faye-websocket/lib/faye/eventsource.js","../../../node_modules/faye-websocket/lib/faye/websocket.js","../../../node_modules/idb/build/wrap-idb-value.js","../../../node_modules/idb/build/index.js","../../app/dist/index.cjs.js","../../database/dist/index.standalone.js","../src/util/util.ts","../src/util/validation.ts","../src/api/onDisconnect.ts","../src/api/TransactionResult.ts","../src/api/Reference.ts","../src/api/Database.ts","../src/api/internal.ts","../src/index.standalone.ts"],"sourcesContent":["/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","'use strict';\n\n/**\n\nStreams in a WebSocket connection\n---------------------------------\n\nWe model a WebSocket as two duplex streams: one stream is for the wire protocol\nover an I/O socket, and the other is for incoming/outgoing messages.\n\n\n                        +----------+      +---------+      +----------+\n    [1] write(chunk) -->| ~~~~~~~~ +----->| parse() +----->| ~~~~~~~~ +--> emit('data') [2]\n                        |          |      +----+----+      |          |\n                        |          |           |           |          |\n                        |    IO    |           | [5]       | Messages |\n                        |          |           V           |          |\n                        |          |      +---------+      |          |\n    [4] emit('data') <--+ ~~~~~~~~ |<-----+ frame() |<-----+ ~~~~~~~~ |<-- write(chunk) [3]\n                        +----------+      +---------+      +----------+\n\n\nMessage transfer in each direction is simple: IO receives a byte stream [1] and\nsends this stream for parsing. The parser will periodically emit a complete\nmessage text on the Messages stream [2]. Similarly, when messages are written\nto the Messages stream [3], they are framed using the WebSocket wire format and\nemitted via IO [4].\n\nThere is a feedback loop via [5] since some input from [1] will be things like\nping, pong and close frames. In these cases the protocol responds by emitting\nresponses directly back to [4] rather than emitting messages via [2].\n\nFor the purposes of flow control, we consider the sources of each Readable\nstream to be as follows:\n\n* [2] receives input from [1]\n* [4] receives input from [1] and [3]\n\nThe classes below express the relationships described above without prescribing\nanything about how parse() and frame() work, other than assuming they emit\n'data' events to the IO and Messages streams. They will work with any protocol\ndriver having these two methods.\n**/\n\n\nvar Stream = require('stream').Stream,\n    util   = require('util');\n\n\nvar IO = function(driver) {\n  this.readable = this.writable = true;\n  this._paused  = false;\n  this._driver  = driver;\n};\nutil.inherits(IO, Stream);\n\n// The IO pause() and resume() methods will be called when the socket we are\n// piping to gets backed up and drains. Since IO output [4] comes from IO input\n// [1] and Messages input [3], we need to tell both of those to return false\n// from write() when this stream is paused.\n\nIO.prototype.pause = function() {\n  this._paused = true;\n  this._driver.messages._paused = true;\n};\n\nIO.prototype.resume = function() {\n  this._paused = false;\n  this.emit('drain');\n\n  var messages = this._driver.messages;\n  messages._paused = false;\n  messages.emit('drain');\n};\n\n// When we receive input from a socket, send it to the parser and tell the\n// source whether to back off.\nIO.prototype.write = function(chunk) {\n  if (!this.writable) return false;\n  this._driver.parse(chunk);\n  return !this._paused;\n};\n\n// The IO end() method will be called when the socket piping into it emits\n// 'close' or 'end', i.e. the socket is closed. In this situation the Messages\n// stream will not emit any more data so we emit 'end'.\nIO.prototype.end = function(chunk) {\n  if (!this.writable) return;\n  if (chunk !== undefined) this.write(chunk);\n  this.writable = false;\n\n  var messages = this._driver.messages;\n  if (messages.readable) {\n    messages.readable = messages.writable = false;\n    messages.emit('end');\n  }\n};\n\nIO.prototype.destroy = function() {\n  this.end();\n};\n\n\nvar Messages = function(driver) {\n  this.readable = this.writable = true;\n  this._paused  = false;\n  this._driver  = driver;\n};\nutil.inherits(Messages, Stream);\n\n// The Messages pause() and resume() methods will be called when the app that's\n// processing the messages gets backed up and drains. If we're emitting\n// messages too fast we should tell the source to slow down. Message output [2]\n// comes from IO input [1].\n\nMessages.prototype.pause = function() {\n  this._driver.io._paused = true;\n};\n\nMessages.prototype.resume = function() {\n  this._driver.io._paused = false;\n  this._driver.io.emit('drain');\n};\n\n// When we receive messages from the user, send them to the formatter and tell\n// the source whether to back off.\nMessages.prototype.write = function(message) {\n  if (!this.writable) return false;\n  if (typeof message === 'string') this._driver.text(message);\n  else this._driver.binary(message);\n  return !this._paused;\n};\n\n// The Messages end() method will be called when a stream piping into it emits\n// 'end'. Many streams may be piped into the WebSocket and one of them ending\n// does not mean the whole socket is done, so just process the input and move\n// on leaving the socket open.\nMessages.prototype.end = function(message) {\n  if (message !== undefined) this.write(message);\n};\n\nMessages.prototype.destroy = function() {};\n\n\nexports.IO = IO;\nexports.Messages = Messages;\n","'use strict';\n\nvar Headers = function() {\n  this.clear();\n};\n\nHeaders.prototype.ALLOWED_DUPLICATES = ['set-cookie', 'set-cookie2', 'warning', 'www-authenticate'];\n\nHeaders.prototype.clear = function() {\n  this._sent  = {};\n  this._lines = [];\n};\n\nHeaders.prototype.set = function(name, value) {\n  if (value === undefined) return;\n\n  name = this._strip(name);\n  value = this._strip(value);\n\n  var key = name.toLowerCase();\n  if (!this._sent.hasOwnProperty(key) || this.ALLOWED_DUPLICATES.indexOf(key) >= 0) {\n    this._sent[key] = true;\n    this._lines.push(name + ': ' + value + '\\r\\n');\n  }\n};\n\nHeaders.prototype.toString = function() {\n  return this._lines.join('');\n};\n\nHeaders.prototype._strip = function(string) {\n  return string.toString().replace(/^ */, '').replace(/ *$/, '');\n};\n\nmodule.exports = Headers;\n","'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar StreamReader = function() {\n  this._queue     = [];\n  this._queueSize = 0;\n  this._offset    = 0;\n};\n\nStreamReader.prototype.put = function(buffer) {\n  if (!buffer || buffer.length === 0) return;\n  if (!Buffer.isBuffer(buffer)) buffer = Buffer.from(buffer);\n  this._queue.push(buffer);\n  this._queueSize += buffer.length;\n};\n\nStreamReader.prototype.read = function(length) {\n  if (length > this._queueSize) return null;\n  if (length === 0) return Buffer.alloc(0);\n\n  this._queueSize -= length;\n\n  var queue  = this._queue,\n      remain = length,\n      first  = queue[0],\n      buffers, buffer;\n\n  if (first.length >= length) {\n    if (first.length === length) {\n      return queue.shift();\n    } else {\n      buffer = first.slice(0, length);\n      queue[0] = first.slice(length);\n      return buffer;\n    }\n  }\n\n  for (var i = 0, n = queue.length; i < n; i++) {\n    if (remain < queue[i].length) break;\n    remain -= queue[i].length;\n  }\n  buffers = queue.splice(0, i);\n\n  if (remain > 0 && queue.length > 0) {\n    buffers.push(queue[0].slice(0, remain));\n    queue[0] = queue[0].slice(remain);\n  }\n  return Buffer.concat(buffers, length);\n};\n\nStreamReader.prototype.eachByte = function(callback, context) {\n  var buffer, n, index;\n\n  while (this._queue.length > 0) {\n    buffer = this._queue[0];\n    n = buffer.length;\n\n    while (this._offset < n) {\n      index = this._offset;\n      this._offset += 1;\n      callback.call(context, buffer[index]);\n    }\n    this._offset = 0;\n    this._queue.shift();\n  }\n};\n\nmodule.exports = StreamReader;\n","'use strict';\n\nvar Buffer  = require('safe-buffer').Buffer,\n    Emitter = require('events').EventEmitter,\n    util    = require('util'),\n    streams = require('../streams'),\n    Headers = require('./headers'),\n    Reader  = require('./stream_reader');\n\nvar Base = function(request, url, options) {\n  Emitter.call(this);\n  Base.validateOptions(options || {}, ['maxLength', 'masking', 'requireMasking', 'protocols']);\n\n  this._request   = request;\n  this._reader    = new Reader();\n  this._options   = options || {};\n  this._maxLength = this._options.maxLength || this.MAX_LENGTH;\n  this._headers   = new Headers();\n  this.__queue    = [];\n  this.readyState = 0;\n  this.url        = url;\n\n  this.io = new streams.IO(this);\n  this.messages = new streams.Messages(this);\n  this._bindEventListeners();\n};\nutil.inherits(Base, Emitter);\n\nBase.isWebSocket = function(request) {\n  var connection = request.headers.connection || '',\n      upgrade    = request.headers.upgrade || '';\n\n  return request.method === 'GET' &&\n         connection.toLowerCase().split(/ *, */).indexOf('upgrade') >= 0 &&\n         upgrade.toLowerCase() === 'websocket';\n};\n\nBase.validateOptions = function(options, validKeys) {\n  for (var key in options) {\n    if (validKeys.indexOf(key) < 0)\n      throw new Error('Unrecognized option: ' + key);\n  }\n};\n\nvar instance = {\n  // This is 64MB, small enough for an average VPS to handle without\n  // crashing from process out of memory\n  MAX_LENGTH: 0x3ffffff,\n\n  STATES: ['connecting', 'open', 'closing', 'closed'],\n\n  _bindEventListeners: function() {\n    var self = this;\n\n    // Protocol errors are informational and do not have to be handled\n    this.messages.on('error', function() {});\n\n    this.on('message', function(event) {\n      var messages = self.messages;\n      if (messages.readable) messages.emit('data', event.data);\n    });\n\n    this.on('error', function(error) {\n      var messages = self.messages;\n      if (messages.readable) messages.emit('error', error);\n    });\n\n    this.on('close', function() {\n      var messages = self.messages;\n      if (!messages.readable) return;\n      messages.readable = messages.writable = false;\n      messages.emit('end');\n    });\n  },\n\n  getState: function() {\n    return this.STATES[this.readyState] || null;\n  },\n\n  addExtension: function(extension) {\n    return false;\n  },\n\n  setHeader: function(name, value) {\n    if (this.readyState > 0) return false;\n    this._headers.set(name, value);\n    return true;\n  },\n\n  start: function() {\n    if (this.readyState !== 0) return false;\n\n    if (!Base.isWebSocket(this._request))\n      return this._failHandshake(new Error('Not a WebSocket request'));\n\n    var response;\n\n    try {\n      response = this._handshakeResponse();\n    } catch (error) {\n      return this._failHandshake(error);\n    }\n\n    this._write(response);\n    if (this._stage !== -1) this._open();\n    return true;\n  },\n\n  _failHandshake: function(error) {\n    var headers = new Headers();\n    headers.set('Content-Type', 'text/plain');\n    headers.set('Content-Length', Buffer.byteLength(error.message, 'utf8'));\n\n    headers = ['HTTP/1.1 400 Bad Request', headers.toString(), error.message];\n    this._write(Buffer.from(headers.join('\\r\\n'), 'utf8'));\n    this._fail('protocol_error', error.message);\n\n    return false;\n  },\n\n  text: function(message) {\n    return this.frame(message);\n  },\n\n  binary: function(message) {\n    return false;\n  },\n\n  ping: function() {\n    return false;\n  },\n\n  pong: function() {\n      return false;\n  },\n\n  close: function(reason, code) {\n    if (this.readyState !== 1) return false;\n    this.readyState = 3;\n    this.emit('close', new Base.CloseEvent(null, null));\n    return true;\n  },\n\n  _open: function() {\n    this.readyState = 1;\n    this.__queue.forEach(function(args) { this.frame.apply(this, args) }, this);\n    this.__queue = [];\n    this.emit('open', new Base.OpenEvent());\n  },\n\n  _queue: function(message) {\n    this.__queue.push(message);\n    return true;\n  },\n\n  _write: function(chunk) {\n    var io = this.io;\n    if (io.readable) io.emit('data', chunk);\n  },\n\n  _fail: function(type, message) {\n    this.readyState = 2;\n    this.emit('error', new Error(message));\n    this.close();\n  }\n};\n\nfor (var key in instance)\n  Base.prototype[key] = instance[key];\n\n\nBase.ConnectEvent = function() {};\n\nBase.OpenEvent = function() {};\n\nBase.CloseEvent = function(code, reason) {\n  this.code   = code;\n  this.reason = reason;\n};\n\nBase.MessageEvent = function(data) {\n  this.data = data;\n};\n\nBase.PingEvent = function(data) {\n  this.data = data;\n};\n\nBase.PongEvent = function(data) {\n  this.data = data;\n};\n\nmodule.exports = Base;\n","/*jshint node:true */\n\nexports.HTTPParser = HTTPParser;\nfunction HTTPParser(type) {\n  if (type !== undefined && type !== HTTPParser.REQUEST && type !== HTTPParser.RESPONSE) {\n    throw new Error('type must be REQUEST or RESPONSE');\n  }\n  if (type === undefined) {\n    // Node v12+\n  } else {\n    this.initialize(type);\n  }\n  this.maxHeaderSize=HTTPParser.maxHeaderSize\n}\nHTTPParser.prototype.initialize = function (type, async_resource) {\n  if (type !== HTTPParser.REQUEST && type !== HTTPParser.RESPONSE) {\n    throw new Error('type must be REQUEST or RESPONSE');\n  }\n  this.type = type;\n  this.state = type + '_LINE';\n  this.info = {\n    headers: [],\n    upgrade: false\n  };\n  this.trailers = [];\n  this.line = '';\n  this.isChunked = false;\n  this.connection = '';\n  this.headerSize = 0; // for preventing too big headers\n  this.body_bytes = null;\n  this.isUserCall = false;\n  this.hadError = false;\n};\n\nHTTPParser.encoding = 'ascii';\nHTTPParser.maxHeaderSize = 80 * 1024; // maxHeaderSize (in bytes) is configurable, but 80kb by default;\nHTTPParser.REQUEST = 'REQUEST';\nHTTPParser.RESPONSE = 'RESPONSE';\n\n// Note: *not* starting with kOnHeaders=0 line the Node parser, because any\n//   newly added constants (kOnTimeout in Node v12.19.0) will overwrite 0!\nvar kOnHeaders = HTTPParser.kOnHeaders = 1;\nvar kOnHeadersComplete = HTTPParser.kOnHeadersComplete = 2;\nvar kOnBody = HTTPParser.kOnBody = 3;\nvar kOnMessageComplete = HTTPParser.kOnMessageComplete = 4;\n\n// Some handler stubs, needed for compatibility\nHTTPParser.prototype[kOnHeaders] =\nHTTPParser.prototype[kOnHeadersComplete] =\nHTTPParser.prototype[kOnBody] =\nHTTPParser.prototype[kOnMessageComplete] = function () {};\n\nvar compatMode0_12 = true;\nObject.defineProperty(HTTPParser, 'kOnExecute', {\n    get: function () {\n      // hack for backward compatibility\n      compatMode0_12 = false;\n      return 99;\n    }\n  });\n\nvar methods = exports.methods = HTTPParser.methods = [\n  'DELETE',\n  'GET',\n  'HEAD',\n  'POST',\n  'PUT',\n  'CONNECT',\n  'OPTIONS',\n  'TRACE',\n  'COPY',\n  'LOCK',\n  'MKCOL',\n  'MOVE',\n  'PROPFIND',\n  'PROPPATCH',\n  'SEARCH',\n  'UNLOCK',\n  'BIND',\n  'REBIND',\n  'UNBIND',\n  'ACL',\n  'REPORT',\n  'MKACTIVITY',\n  'CHECKOUT',\n  'MERGE',\n  'M-SEARCH',\n  'NOTIFY',\n  'SUBSCRIBE',\n  'UNSUBSCRIBE',\n  'PATCH',\n  'PURGE',\n  'MKCALENDAR',\n  'LINK',\n  'UNLINK',\n  'SOURCE',\n];\nvar method_connect = methods.indexOf('CONNECT');\nHTTPParser.prototype.reinitialize = HTTPParser;\nHTTPParser.prototype.close =\nHTTPParser.prototype.pause =\nHTTPParser.prototype.resume =\nHTTPParser.prototype.remove =\nHTTPParser.prototype.free = function () {};\nHTTPParser.prototype._compatMode0_11 = false;\nHTTPParser.prototype.getAsyncId = function() { return 0; };\n\nvar headerState = {\n  REQUEST_LINE: true,\n  RESPONSE_LINE: true,\n  HEADER: true\n};\nHTTPParser.prototype.execute = function (chunk, start, length) {\n  if (!(this instanceof HTTPParser)) {\n    throw new TypeError('not a HTTPParser');\n  }\n\n  // backward compat to node < 0.11.4\n  // Note: the start and length params were removed in newer version\n  start = start || 0;\n  length = typeof length === 'number' ? length : chunk.length;\n\n  this.chunk = chunk;\n  this.offset = start;\n  var end = this.end = start + length;\n  try {\n    while (this.offset < end) {\n      if (this[this.state]()) {\n        break;\n      }\n    }\n  } catch (err) {\n    if (this.isUserCall) {\n      throw err;\n    }\n    this.hadError = true;\n    return err;\n  }\n  this.chunk = null;\n  length = this.offset - start;\n  if (headerState[this.state]) {\n    this.headerSize += length;\n    if (this.headerSize > (this.maxHeaderSize||HTTPParser.maxHeaderSize)) {\n      return new Error('max header size exceeded');\n    }\n  }\n  return length;\n};\n\nvar stateFinishAllowed = {\n  REQUEST_LINE: true,\n  RESPONSE_LINE: true,\n  BODY_RAW: true\n};\nHTTPParser.prototype.finish = function () {\n  if (this.hadError) {\n    return;\n  }\n  if (!stateFinishAllowed[this.state]) {\n    return new Error('invalid state for EOF');\n  }\n  if (this.state === 'BODY_RAW') {\n    this.userCall()(this[kOnMessageComplete]());\n  }\n};\n\n// These three methods are used for an internal speed optimization, and it also\n// works if theses are noops. Basically consume() asks us to read the bytes\n// ourselves, but if we don't do it we get them through execute().\nHTTPParser.prototype.consume =\nHTTPParser.prototype.unconsume =\nHTTPParser.prototype.getCurrentBuffer = function () {};\n\n//For correct error handling - see HTTPParser#execute\n//Usage: this.userCall()(userFunction('arg'));\nHTTPParser.prototype.userCall = function () {\n  this.isUserCall = true;\n  var self = this;\n  return function (ret) {\n    self.isUserCall = false;\n    return ret;\n  };\n};\n\nHTTPParser.prototype.nextRequest = function () {\n  this.userCall()(this[kOnMessageComplete]());\n  this.reinitialize(this.type);\n};\n\nHTTPParser.prototype.consumeLine = function () {\n  var end = this.end,\n      chunk = this.chunk;\n  for (var i = this.offset; i < end; i++) {\n    if (chunk[i] === 0x0a) { // \\n\n      var line = this.line + chunk.toString(HTTPParser.encoding, this.offset, i);\n      if (line.charAt(line.length - 1) === '\\r') {\n        line = line.substr(0, line.length - 1);\n      }\n      this.line = '';\n      this.offset = i + 1;\n      return line;\n    }\n  }\n  //line split over multiple chunks\n  this.line += chunk.toString(HTTPParser.encoding, this.offset, this.end);\n  this.offset = this.end;\n};\n\nvar headerExp = /^([^: \\t]+):[ \\t]*((?:.*[^ \\t])|)/;\nvar headerContinueExp = /^[ \\t]+(.*[^ \\t])/;\nHTTPParser.prototype.parseHeader = function (line, headers) {\n  if (line.indexOf('\\r') !== -1) {\n    throw parseErrorCode('HPE_LF_EXPECTED');\n  }\n\n  var match = headerExp.exec(line);\n  var k = match && match[1];\n  if (k) { // skip empty string (malformed header)\n    headers.push(k);\n    headers.push(match[2]);\n  } else {\n    var matchContinue = headerContinueExp.exec(line);\n    if (matchContinue && headers.length) {\n      if (headers[headers.length - 1]) {\n        headers[headers.length - 1] += ' ';\n      }\n      headers[headers.length - 1] += matchContinue[1];\n    }\n  }\n};\n\nvar requestExp = /^([A-Z-]+) ([^ ]+) HTTP\\/(\\d)\\.(\\d)$/;\nHTTPParser.prototype.REQUEST_LINE = function () {\n  var line = this.consumeLine();\n  if (!line) {\n    return;\n  }\n  var match = requestExp.exec(line);\n  if (match === null) {\n    throw parseErrorCode('HPE_INVALID_CONSTANT');\n  }\n  this.info.method = this._compatMode0_11 ? match[1] : methods.indexOf(match[1]);\n  if (this.info.method === -1) {\n    throw new Error('invalid request method');\n  }\n  this.info.url = match[2];\n  this.info.versionMajor = +match[3];\n  this.info.versionMinor = +match[4];\n  this.body_bytes = 0;\n  this.state = 'HEADER';\n};\n\nvar responseExp = /^HTTP\\/(\\d)\\.(\\d) (\\d{3}) ?(.*)$/;\nHTTPParser.prototype.RESPONSE_LINE = function () {\n  var line = this.consumeLine();\n  if (!line) {\n    return;\n  }\n  var match = responseExp.exec(line);\n  if (match === null) {\n    throw parseErrorCode('HPE_INVALID_CONSTANT');\n  }\n  this.info.versionMajor = +match[1];\n  this.info.versionMinor = +match[2];\n  var statusCode = this.info.statusCode = +match[3];\n  this.info.statusMessage = match[4];\n  // Implied zero length.\n  if ((statusCode / 100 | 0) === 1 || statusCode === 204 || statusCode === 304) {\n    this.body_bytes = 0;\n  }\n  this.state = 'HEADER';\n};\n\nHTTPParser.prototype.shouldKeepAlive = function () {\n  if (this.info.versionMajor > 0 && this.info.versionMinor > 0) {\n    if (this.connection.indexOf('close') !== -1) {\n      return false;\n    }\n  } else if (this.connection.indexOf('keep-alive') === -1) {\n    return false;\n  }\n  if (this.body_bytes !== null || this.isChunked) { // || skipBody\n    return true;\n  }\n  return false;\n};\n\nHTTPParser.prototype.HEADER = function () {\n  var line = this.consumeLine();\n  if (line === undefined) {\n    return;\n  }\n  var info = this.info;\n  if (line) {\n    this.parseHeader(line, info.headers);\n  } else {\n    var headers = info.headers;\n    var hasContentLength = false;\n    var currentContentLengthValue;\n    var hasUpgradeHeader = false;\n    for (var i = 0; i < headers.length; i += 2) {\n      switch (headers[i].toLowerCase()) {\n        case 'transfer-encoding':\n          this.isChunked = headers[i + 1].toLowerCase() === 'chunked';\n          break;\n        case 'content-length':\n          currentContentLengthValue = +headers[i + 1];\n          if (hasContentLength) {\n            // Fix duplicate Content-Length header with same values.\n            // Throw error only if values are different.\n            // Known issues:\n            // https://github.com/request/request/issues/2091#issuecomment-328715113\n            // https://github.com/nodejs/node/issues/6517#issuecomment-216263771\n            if (currentContentLengthValue !== this.body_bytes) {\n              throw parseErrorCode('HPE_UNEXPECTED_CONTENT_LENGTH');\n            }\n          } else {\n            hasContentLength = true;\n            this.body_bytes = currentContentLengthValue;\n          }\n          break;\n        case 'connection':\n          this.connection += headers[i + 1].toLowerCase();\n          break;\n        case 'upgrade':\n          hasUpgradeHeader = true;\n          break;\n      }\n    }\n\n    // if both isChunked and hasContentLength, isChunked wins\n    // This is required so the body is parsed using the chunked method, and matches\n    // Chrome's behavior.  We could, maybe, ignore them both (would get chunked\n    // encoding into the body), and/or disable shouldKeepAlive to be more\n    // resilient.\n    if (this.isChunked && hasContentLength) {\n      hasContentLength = false;\n      this.body_bytes = null;\n    }\n\n    // Logic from https://github.com/nodejs/http-parser/blob/921d5585515a153fa00e411cf144280c59b41f90/http_parser.c#L1727-L1737\n    // \"For responses, \"Upgrade: foo\" and \"Connection: upgrade\" are\n    //   mandatory only when it is a 101 Switching Protocols response,\n    //   otherwise it is purely informational, to announce support.\n    if (hasUpgradeHeader && this.connection.indexOf('upgrade') != -1) {\n      info.upgrade = this.type === HTTPParser.REQUEST || info.statusCode === 101;\n    } else {\n      info.upgrade = info.method === method_connect;\n    }\n\n    if (this.isChunked && info.upgrade) {\n      this.isChunked = false;\n    }\n\n    info.shouldKeepAlive = this.shouldKeepAlive();\n    //problem which also exists in original node: we should know skipBody before calling onHeadersComplete\n    var skipBody;\n    if (compatMode0_12) {\n      skipBody = this.userCall()(this[kOnHeadersComplete](info));\n    } else {\n      skipBody = this.userCall()(this[kOnHeadersComplete](info.versionMajor,\n          info.versionMinor, info.headers, info.method, info.url, info.statusCode,\n          info.statusMessage, info.upgrade, info.shouldKeepAlive));\n    }\n    if (skipBody === 2) {\n      this.nextRequest();\n      return true;\n    } else if (this.isChunked && !skipBody) {\n      this.state = 'BODY_CHUNKHEAD';\n    } else if (skipBody || this.body_bytes === 0) {\n      this.nextRequest();\n      // For older versions of node (v6.x and older?), that return skipBody=1 or skipBody=true,\n      //   need this \"return true;\" if it's an upgrade request.\n      return info.upgrade;\n    } else if (this.body_bytes === null) {\n      this.state = 'BODY_RAW';\n    } else {\n      this.state = 'BODY_SIZED';\n    }\n  }\n};\n\nHTTPParser.prototype.BODY_CHUNKHEAD = function () {\n  var line = this.consumeLine();\n  if (line === undefined) {\n    return;\n  }\n  this.body_bytes = parseInt(line, 16);\n  if (!this.body_bytes) {\n    this.state = 'BODY_CHUNKTRAILERS';\n  } else {\n    this.state = 'BODY_CHUNK';\n  }\n};\n\nHTTPParser.prototype.BODY_CHUNK = function () {\n  var length = Math.min(this.end - this.offset, this.body_bytes);\n  // 0, length are for backwards compatibility. See: https://github.com/creationix/http-parser-js/pull/98\n  this.userCall()(this[kOnBody](this.chunk.slice(this.offset, this.offset + length), 0, length));\n  this.offset += length;\n  this.body_bytes -= length;\n  if (!this.body_bytes) {\n    this.state = 'BODY_CHUNKEMPTYLINE';\n  }\n};\n\nHTTPParser.prototype.BODY_CHUNKEMPTYLINE = function () {\n  var line = this.consumeLine();\n  if (line === undefined) {\n    return;\n  }\n  if (line !== '') {\n    throw new Error('Expected empty line');\n  }\n  this.state = 'BODY_CHUNKHEAD';\n};\n\nHTTPParser.prototype.BODY_CHUNKTRAILERS = function () {\n  var line = this.consumeLine();\n  if (line === undefined) {\n    return;\n  }\n  if (line) {\n    this.parseHeader(line, this.trailers);\n  } else {\n    if (this.trailers.length) {\n      this.userCall()(this[kOnHeaders](this.trailers, ''));\n    }\n    this.nextRequest();\n  }\n};\n\nHTTPParser.prototype.BODY_RAW = function () {\n  // 0, length are for backwards compatibility. See: https://github.com/creationix/http-parser-js/pull/98\n  this.userCall()(this[kOnBody](this.chunk.slice(this.offset, this.end), 0, this.end - this.offset));\n  this.offset = this.end;\n};\n\nHTTPParser.prototype.BODY_SIZED = function () {\n  var length = Math.min(this.end - this.offset, this.body_bytes);\n  // 0, length are for backwards compatibility. See: https://github.com/creationix/http-parser-js/pull/98\n  this.userCall()(this[kOnBody](this.chunk.slice(this.offset, this.offset + length), 0, length));\n  this.offset += length;\n  this.body_bytes -= length;\n  if (!this.body_bytes) {\n    this.nextRequest();\n  }\n};\n\n// backward compat to node < 0.11.6\n['Headers', 'HeadersComplete', 'Body', 'MessageComplete'].forEach(function (name) {\n  var k = HTTPParser['kOn' + name];\n  Object.defineProperty(HTTPParser.prototype, 'on' + name, {\n    get: function () {\n      return this[k];\n    },\n    set: function (to) {\n      // hack for backward compatibility\n      this._compatMode0_11 = true;\n      method_connect = 'CONNECT';\n      return (this[k] = to);\n    }\n  });\n});\n\nfunction parseErrorCode(code) {\n  var err = new Error('Parse Error');\n  err.code = code;\n  return err;\n}\n","'use strict';\n\nvar NodeHTTPParser = require('http-parser-js').HTTPParser,\n    Buffer         = require('safe-buffer').Buffer;\n\nvar TYPES = {\n  request:  NodeHTTPParser.REQUEST  || 'request',\n  response: NodeHTTPParser.RESPONSE || 'response'\n};\n\nvar HttpParser = function(type) {\n  this._type     = type;\n  this._parser   = new NodeHTTPParser(TYPES[type]);\n  this._complete = false;\n  this.headers   = {};\n\n  var current = null,\n      self    = this;\n\n  this._parser.onHeaderField = function(b, start, length) {\n    current = b.toString('utf8', start, start + length).toLowerCase();\n  };\n\n  this._parser.onHeaderValue = function(b, start, length) {\n    var value = b.toString('utf8', start, start + length);\n\n    if (self.headers.hasOwnProperty(current))\n      self.headers[current] += ', ' + value;\n    else\n      self.headers[current] = value;\n  };\n\n  this._parser.onHeadersComplete = this._parser[NodeHTTPParser.kOnHeadersComplete] =\n  function(majorVersion, minorVersion, headers, method, pathname, statusCode) {\n    var info = arguments[0];\n\n    if (typeof info === 'object') {\n      method     = info.method;\n      pathname   = info.url;\n      statusCode = info.statusCode;\n      headers    = info.headers;\n    }\n\n    self.method     = (typeof method === 'number') ? HttpParser.METHODS[method] : method;\n    self.statusCode = statusCode;\n    self.url        = pathname;\n\n    if (!headers) return;\n\n    for (var i = 0, n = headers.length, key, value; i < n; i += 2) {\n      key   = headers[i].toLowerCase();\n      value = headers[i+1];\n      if (self.headers.hasOwnProperty(key))\n        self.headers[key] += ', ' + value;\n      else\n        self.headers[key] = value;\n    }\n\n    self._complete = true;\n  };\n};\n\nHttpParser.METHODS = {\n  0:  'DELETE',\n  1:  'GET',\n  2:  'HEAD',\n  3:  'POST',\n  4:  'PUT',\n  5:  'CONNECT',\n  6:  'OPTIONS',\n  7:  'TRACE',\n  8:  'COPY',\n  9:  'LOCK',\n  10: 'MKCOL',\n  11: 'MOVE',\n  12: 'PROPFIND',\n  13: 'PROPPATCH',\n  14: 'SEARCH',\n  15: 'UNLOCK',\n  16: 'BIND',\n  17: 'REBIND',\n  18: 'UNBIND',\n  19: 'ACL',\n  20: 'REPORT',\n  21: 'MKACTIVITY',\n  22: 'CHECKOUT',\n  23: 'MERGE',\n  24: 'M-SEARCH',\n  25: 'NOTIFY',\n  26: 'SUBSCRIBE',\n  27: 'UNSUBSCRIBE',\n  28: 'PATCH',\n  29: 'PURGE',\n  30: 'MKCALENDAR',\n  31: 'LINK',\n  32: 'UNLINK'\n};\n\nvar VERSION = process.version\n  ? process.version.match(/[0-9]+/g).map(function(n) { return parseInt(n, 10) })\n  : [];\n\nif (VERSION[0] === 0 && VERSION[1] === 12) {\n  HttpParser.METHODS[16] = 'REPORT';\n  HttpParser.METHODS[17] = 'MKACTIVITY';\n  HttpParser.METHODS[18] = 'CHECKOUT';\n  HttpParser.METHODS[19] = 'MERGE';\n  HttpParser.METHODS[20] = 'M-SEARCH';\n  HttpParser.METHODS[21] = 'NOTIFY';\n  HttpParser.METHODS[22] = 'SUBSCRIBE';\n  HttpParser.METHODS[23] = 'UNSUBSCRIBE';\n  HttpParser.METHODS[24] = 'PATCH';\n  HttpParser.METHODS[25] = 'PURGE';\n}\n\nHttpParser.prototype.isComplete = function() {\n  return this._complete;\n};\n\nHttpParser.prototype.parse = function(chunk) {\n  var consumed = this._parser.execute(chunk, 0, chunk.length);\n\n  if (typeof consumed !== 'number') {\n    this.error     = consumed;\n    this._complete = true;\n    return;\n  }\n\n  if (this._complete)\n    this.body = (consumed < chunk.length)\n              ? chunk.slice(consumed)\n              : Buffer.alloc(0);\n};\n\nmodule.exports = HttpParser;\n","'use strict';\n\nvar TOKEN    = /([!#\\$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z]+)/,\n    NOTOKEN  = /([^!#\\$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z])/g,\n    QUOTED   = /\"((?:\\\\[\\x00-\\x7f]|[^\\x00-\\x08\\x0a-\\x1f\\x7f\"\\\\])*)\"/,\n    PARAM    = new RegExp(TOKEN.source + '(?:=(?:' + TOKEN.source + '|' + QUOTED.source + '))?'),\n    EXT      = new RegExp(TOKEN.source + '(?: *; *' + PARAM.source + ')*', 'g'),\n    EXT_LIST = new RegExp('^' + EXT.source + '(?: *, *' + EXT.source + ')*$'),\n    NUMBER   = /^-?(0|[1-9][0-9]*)(\\.[0-9]+)?$/;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar Parser = {\n  parseHeader: function(header) {\n    var offers = new Offers();\n    if (header === '' || header === undefined) return offers;\n\n    if (!EXT_LIST.test(header))\n      throw new SyntaxError('Invalid Sec-WebSocket-Extensions header: ' + header);\n\n    var values = header.match(EXT);\n\n    values.forEach(function(value) {\n      var params = value.match(new RegExp(PARAM.source, 'g')),\n          name   = params.shift(),\n          offer  = {};\n\n      params.forEach(function(param) {\n        var args = param.match(PARAM), key = args[1], data;\n\n        if (args[2] !== undefined) {\n          data = args[2];\n        } else if (args[3] !== undefined) {\n          data = args[3].replace(/\\\\/g, '');\n        } else {\n          data = true;\n        }\n        if (NUMBER.test(data)) data = parseFloat(data);\n\n        if (hasOwnProperty.call(offer, key)) {\n          offer[key] = [].concat(offer[key]);\n          offer[key].push(data);\n        } else {\n          offer[key] = data;\n        }\n      }, this);\n      offers.push(name, offer);\n    }, this);\n\n    return offers;\n  },\n\n  serializeParams: function(name, params) {\n    var values = [];\n\n    var print = function(key, value) {\n      if (value instanceof Array) {\n        value.forEach(function(v) { print(key, v) });\n      } else if (value === true) {\n        values.push(key);\n      } else if (typeof value === 'number') {\n        values.push(key + '=' + value);\n      } else if (NOTOKEN.test(value)) {\n        values.push(key + '=\"' + value.replace(/\"/g, '\\\\\"') + '\"');\n      } else {\n        values.push(key + '=' + value);\n      }\n    };\n\n    for (var key in params) print(key, params[key]);\n\n    return [name].concat(values).join('; ');\n  }\n};\n\nvar Offers = function() {\n  this._byName  = {};\n  this._inOrder = [];\n};\n\nOffers.prototype.push = function(name, params) {\n  if (!hasOwnProperty.call(this._byName, name))\n    this._byName[name] = [];\n\n  this._byName[name].push(params);\n  this._inOrder.push({ name: name, params: params });\n};\n\nOffers.prototype.eachOffer = function(callback, context) {\n  var list = this._inOrder;\n  for (var i = 0, n = list.length; i < n; i++)\n    callback.call(context, list[i].name, list[i].params);\n};\n\nOffers.prototype.byName = function(name) {\n  return this._byName[name] || [];\n};\n\nOffers.prototype.toArray = function() {\n  return this._inOrder.slice();\n};\n\nmodule.exports = Parser;\n","'use strict';\n\nvar RingBuffer = function(bufferSize) {\n  this._bufferSize = bufferSize;\n  this.clear();\n};\n\nRingBuffer.prototype.clear = function() {\n  this._buffer     = new Array(this._bufferSize);\n  this._ringOffset = 0;\n  this._ringSize   = this._bufferSize;\n  this._head       = 0;\n  this._tail       = 0;\n  this.length      = 0;\n};\n\nRingBuffer.prototype.push = function(value) {\n  var expandBuffer = false,\n      expandRing   = false;\n\n  if (this._ringSize < this._bufferSize) {\n    expandBuffer = (this._tail === 0);\n  } else if (this._ringOffset === this._ringSize) {\n    expandBuffer = true;\n    expandRing   = (this._tail === 0);\n  }\n\n  if (expandBuffer) {\n    this._tail       = this._bufferSize;\n    this._buffer     = this._buffer.concat(new Array(this._bufferSize));\n    this._bufferSize = this._buffer.length;\n\n    if (expandRing)\n      this._ringSize = this._bufferSize;\n  }\n\n  this._buffer[this._tail] = value;\n  this.length += 1;\n  if (this._tail < this._ringSize) this._ringOffset += 1;\n  this._tail = (this._tail + 1) % this._bufferSize;\n};\n\nRingBuffer.prototype.peek = function() {\n  if (this.length === 0) return void 0;\n  return this._buffer[this._head];\n};\n\nRingBuffer.prototype.shift = function() {\n  if (this.length === 0) return void 0;\n\n  var value = this._buffer[this._head];\n  this._buffer[this._head] = void 0;\n  this.length -= 1;\n  this._ringOffset -= 1;\n\n  if (this._ringOffset === 0 && this.length > 0) {\n    this._head       = this._ringSize;\n    this._ringOffset = this.length;\n    this._ringSize   = this._bufferSize;\n  } else {\n    this._head = (this._head + 1) % this._ringSize;\n  }\n  return value;\n};\n\nmodule.exports = RingBuffer;\n","'use strict';\n\nvar RingBuffer = require('./ring_buffer');\n\nvar Functor = function(session, method) {\n  this._session = session;\n  this._method  = method;\n  this._queue   = new RingBuffer(Functor.QUEUE_SIZE);\n  this._stopped = false;\n  this.pending  = 0;\n};\n\nFunctor.QUEUE_SIZE = 8;\n\nFunctor.prototype.call = function(error, message, callback, context) {\n  if (this._stopped) return;\n\n  var record = { error: error, message: message, callback: callback, context: context, done: false },\n      called = false,\n      self   = this;\n\n  this._queue.push(record);\n\n  if (record.error) {\n    record.done = true;\n    this._stop();\n    return this._flushQueue();\n  }\n\n  var handler = function(err, msg) {\n    if (!(called ^ (called = true))) return;\n\n    if (err) {\n      self._stop();\n      record.error   = err;\n      record.message = null;\n    } else {\n      record.message = msg;\n    }\n\n    record.done = true;\n    self._flushQueue();\n  };\n\n  try {\n    this._session[this._method](message, handler);\n  } catch (err) {\n    handler(err);\n  }\n};\n\nFunctor.prototype._stop = function() {\n  this.pending  = this._queue.length;\n  this._stopped = true;\n};\n\nFunctor.prototype._flushQueue = function() {\n  var queue = this._queue, record;\n\n  while (queue.length > 0 && queue.peek().done) {\n    record = queue.shift();\n    if (record.error) {\n      this.pending = 0;\n      queue.clear();\n    } else {\n      this.pending -= 1;\n    }\n    record.callback.call(record.context, record.error, record.message);\n  }\n};\n\nmodule.exports = Functor;\n","'use strict';\n\nvar RingBuffer = require('./ring_buffer');\n\nvar Pledge = function() {\n  this._complete  = false;\n  this._callbacks = new RingBuffer(Pledge.QUEUE_SIZE);\n};\n\nPledge.QUEUE_SIZE = 4;\n\nPledge.all = function(list) {\n  var pledge  = new Pledge(),\n      pending = list.length,\n      n       = pending;\n\n  if (pending === 0) pledge.done();\n\n  while (n--) list[n].then(function() {\n    pending -= 1;\n    if (pending === 0) pledge.done();\n  });\n  return pledge;\n};\n\nPledge.prototype.then = function(callback) {\n  if (this._complete) callback();\n  else this._callbacks.push(callback);\n};\n\nPledge.prototype.done = function() {\n  this._complete = true;\n  var callbacks = this._callbacks, callback;\n  while (callback = callbacks.shift()) callback();\n};\n\nmodule.exports = Pledge;\n","'use strict';\n\nvar Functor = require('./functor'),\n    Pledge  = require('./pledge');\n\nvar Cell = function(tuple) {\n  this._ext     = tuple[0];\n  this._session = tuple[1];\n\n  this._functors = {\n    incoming: new Functor(this._session, 'processIncomingMessage'),\n    outgoing: new Functor(this._session, 'processOutgoingMessage')\n  };\n};\n\nCell.prototype.pending = function(direction) {\n  var functor = this._functors[direction];\n  if (!functor._stopped) functor.pending += 1;\n};\n\nCell.prototype.incoming = function(error, message, callback, context) {\n  this._exec('incoming', error, message, callback, context);\n};\n\nCell.prototype.outgoing = function(error, message, callback, context) {\n  this._exec('outgoing', error, message, callback, context);\n};\n\nCell.prototype.close = function() {\n  this._closed = this._closed || new Pledge();\n  this._doClose();\n  return this._closed;\n};\n\nCell.prototype._exec = function(direction, error, message, callback, context) {\n  this._functors[direction].call(error, message, function(err, msg) {\n    if (err) err.message = this._ext.name + ': ' + err.message;\n    callback.call(context, err, msg);\n    this._doClose();\n  }, this);\n};\n\nCell.prototype._doClose = function() {\n  var fin  = this._functors.incoming,\n      fout = this._functors.outgoing;\n\n  if (!this._closed || fin.pending + fout.pending !== 0) return;\n  if (this._session) this._session.close();\n  this._session = null;\n  this._closed.done();\n};\n\nmodule.exports = Cell;\n","'use strict';\n\nvar Cell   = require('./cell'),\n    Pledge = require('./pledge');\n\nvar Pipeline = function(sessions) {\n  this._cells   = sessions.map(function(session) { return new Cell(session) });\n  this._stopped = { incoming: false, outgoing: false };\n};\n\nPipeline.prototype.processIncomingMessage = function(message, callback, context) {\n  if (this._stopped.incoming) return;\n  this._loop('incoming', this._cells.length - 1, -1, -1, message, callback, context);\n};\n\nPipeline.prototype.processOutgoingMessage = function(message, callback, context) {\n  if (this._stopped.outgoing) return;\n  this._loop('outgoing', 0, this._cells.length, 1, message, callback, context);\n};\n\nPipeline.prototype.close = function(callback, context) {\n  this._stopped = { incoming: true, outgoing: true };\n\n  var closed = this._cells.map(function(a) { return a.close() });\n  if (callback)\n    Pledge.all(closed).then(function() { callback.call(context) });\n};\n\nPipeline.prototype._loop = function(direction, start, end, step, message, callback, context) {\n  var cells = this._cells,\n      n     = cells.length,\n      self  = this;\n\n  while (n--) cells[n].pending(direction);\n\n  var pipe = function(index, error, msg) {\n    if (index === end) return callback.call(context, error, msg);\n\n    cells[index][direction](error, msg, function(err, m) {\n      if (err) self._stopped[direction] = true;\n      pipe(index + step, err, m);\n    });\n  };\n  pipe(start, null, message);\n};\n\nmodule.exports = Pipeline;\n","'use strict';\n\nvar Parser   = require('./parser'),\n    Pipeline = require('./pipeline');\n\nvar Extensions = function() {\n  this._rsv1 = this._rsv2 = this._rsv3 = null;\n\n  this._byName   = {};\n  this._inOrder  = [];\n  this._sessions = [];\n  this._index    = {};\n};\n\nExtensions.MESSAGE_OPCODES = [1, 2];\n\nvar instance = {\n  add: function(ext) {\n    if (typeof ext.name !== 'string') throw new TypeError('extension.name must be a string');\n    if (ext.type !== 'permessage') throw new TypeError('extension.type must be \"permessage\"');\n\n    if (typeof ext.rsv1 !== 'boolean') throw new TypeError('extension.rsv1 must be true or false');\n    if (typeof ext.rsv2 !== 'boolean') throw new TypeError('extension.rsv2 must be true or false');\n    if (typeof ext.rsv3 !== 'boolean') throw new TypeError('extension.rsv3 must be true or false');\n\n    if (this._byName.hasOwnProperty(ext.name))\n      throw new TypeError('An extension with name \"' + ext.name + '\" is already registered');\n\n    this._byName[ext.name] = ext;\n    this._inOrder.push(ext);\n  },\n\n  generateOffer: function() {\n    var sessions = [],\n        offer    = [],\n        index    = {};\n\n    this._inOrder.forEach(function(ext) {\n      var session = ext.createClientSession();\n      if (!session) return;\n\n      var record = [ext, session];\n      sessions.push(record);\n      index[ext.name] = record;\n\n      var offers = session.generateOffer();\n      offers = offers ? [].concat(offers) : [];\n\n      offers.forEach(function(off) {\n        offer.push(Parser.serializeParams(ext.name, off));\n      }, this);\n    }, this);\n\n    this._sessions = sessions;\n    this._index    = index;\n\n    return offer.length > 0 ? offer.join(', ') : null;\n  },\n\n  activate: function(header) {\n    var responses = Parser.parseHeader(header),\n        sessions  = [];\n\n    responses.eachOffer(function(name, params) {\n      var record = this._index[name];\n\n      if (!record)\n        throw new Error('Server sent an extension response for unknown extension \"' + name + '\"');\n\n      var ext      = record[0],\n          session  = record[1],\n          reserved = this._reserved(ext);\n\n      if (reserved)\n        throw new Error('Server sent two extension responses that use the RSV' +\n                        reserved[0] + ' bit: \"' +\n                        reserved[1] + '\" and \"' + ext.name + '\"');\n\n      if (session.activate(params) !== true)\n        throw new Error('Server sent unacceptable extension parameters: ' +\n                        Parser.serializeParams(name, params));\n\n      this._reserve(ext);\n      sessions.push(record);\n    }, this);\n\n    this._sessions = sessions;\n    this._pipeline = new Pipeline(sessions);\n  },\n\n  generateResponse: function(header) {\n    var sessions = [],\n        response = [],\n        offers   = Parser.parseHeader(header);\n\n    this._inOrder.forEach(function(ext) {\n      var offer = offers.byName(ext.name);\n      if (offer.length === 0 || this._reserved(ext)) return;\n\n      var session = ext.createServerSession(offer);\n      if (!session) return;\n\n      this._reserve(ext);\n      sessions.push([ext, session]);\n      response.push(Parser.serializeParams(ext.name, session.generateResponse()));\n    }, this);\n\n    this._sessions = sessions;\n    this._pipeline = new Pipeline(sessions);\n\n    return response.length > 0 ? response.join(', ') : null;\n  },\n\n  validFrameRsv: function(frame) {\n    var allowed = { rsv1: false, rsv2: false, rsv3: false },\n        ext;\n\n    if (Extensions.MESSAGE_OPCODES.indexOf(frame.opcode) >= 0) {\n      for (var i = 0, n = this._sessions.length; i < n; i++) {\n        ext = this._sessions[i][0];\n        allowed.rsv1 = allowed.rsv1 || ext.rsv1;\n        allowed.rsv2 = allowed.rsv2 || ext.rsv2;\n        allowed.rsv3 = allowed.rsv3 || ext.rsv3;\n      }\n    }\n\n    return (allowed.rsv1 || !frame.rsv1) &&\n           (allowed.rsv2 || !frame.rsv2) &&\n           (allowed.rsv3 || !frame.rsv3);\n  },\n\n  processIncomingMessage: function(message, callback, context) {\n    this._pipeline.processIncomingMessage(message, callback, context);\n  },\n\n  processOutgoingMessage: function(message, callback, context) {\n    this._pipeline.processOutgoingMessage(message, callback, context);\n  },\n\n  close: function(callback, context) {\n    if (!this._pipeline) return callback.call(context);\n    this._pipeline.close(callback, context);\n  },\n\n  _reserve: function(ext) {\n    this._rsv1 = this._rsv1 || (ext.rsv1 && ext.name);\n    this._rsv2 = this._rsv2 || (ext.rsv2 && ext.name);\n    this._rsv3 = this._rsv3 || (ext.rsv3 && ext.name);\n  },\n\n  _reserved: function(ext) {\n    if (this._rsv1 && ext.rsv1) return [1, this._rsv1];\n    if (this._rsv2 && ext.rsv2) return [2, this._rsv2];\n    if (this._rsv3 && ext.rsv3) return [3, this._rsv3];\n    return false;\n  }\n};\n\nfor (var key in instance)\n  Extensions.prototype[key] = instance[key];\n\nmodule.exports = Extensions;\n","'use strict';\n\nvar Frame = function() {};\n\nvar instance = {\n  final:        false,\n  rsv1:         false,\n  rsv2:         false,\n  rsv3:         false,\n  opcode:       null,\n  masked:       false,\n  maskingKey:   null,\n  lengthBytes:  1,\n  length:       0,\n  payload:      null\n};\n\nfor (var key in instance)\n  Frame.prototype[key] = instance[key];\n\nmodule.exports = Frame;\n","'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar Message = function() {\n  this.rsv1    = false;\n  this.rsv2    = false;\n  this.rsv3    = false;\n  this.opcode  = null;\n  this.length  = 0;\n  this._chunks = [];\n};\n\nvar instance = {\n  read: function() {\n    return this.data = this.data || Buffer.concat(this._chunks, this.length);\n  },\n\n  pushFrame: function(frame) {\n    this.rsv1 = this.rsv1 || frame.rsv1;\n    this.rsv2 = this.rsv2 || frame.rsv2;\n    this.rsv3 = this.rsv3 || frame.rsv3;\n\n    if (this.opcode === null) this.opcode = frame.opcode;\n\n    this._chunks.push(frame.payload);\n    this.length += frame.length;\n  }\n};\n\nfor (var key in instance)\n  Message.prototype[key] = instance[key];\n\nmodule.exports = Message;\n","'use strict';\n\nvar Buffer     = require('safe-buffer').Buffer,\n    crypto     = require('crypto'),\n    util       = require('util'),\n    Extensions = require('websocket-extensions'),\n    Base       = require('./base'),\n    Frame      = require('./hybi/frame'),\n    Message    = require('./hybi/message');\n\nvar Hybi = function(request, url, options) {\n  Base.apply(this, arguments);\n\n  this._extensions     = new Extensions();\n  this._stage          = 0;\n  this._masking        = this._options.masking;\n  this._protocols      = this._options.protocols || [];\n  this._requireMasking = this._options.requireMasking;\n  this._pingCallbacks  = {};\n\n  if (typeof this._protocols === 'string')\n    this._protocols = this._protocols.split(/ *, */);\n\n  if (!this._request) return;\n\n  var protos    = this._request.headers['sec-websocket-protocol'],\n      supported = this._protocols;\n\n  if (protos !== undefined) {\n    if (typeof protos === 'string') protos = protos.split(/ *, */);\n    this.protocol = protos.filter(function(p) { return supported.indexOf(p) >= 0 })[0];\n  }\n\n  this.version = 'hybi-' + Hybi.VERSION;\n};\nutil.inherits(Hybi, Base);\n\nHybi.VERSION = '13';\n\nHybi.mask = function(payload, mask, offset) {\n  if (!mask || mask.length === 0) return payload;\n  offset = offset || 0;\n\n  for (var i = 0, n = payload.length - offset; i < n; i++) {\n    payload[offset + i] = payload[offset + i] ^ mask[i % 4];\n  }\n  return payload;\n};\n\nHybi.generateAccept = function(key) {\n  var sha1 = crypto.createHash('sha1');\n  sha1.update(key + Hybi.GUID);\n  return sha1.digest('base64');\n};\n\nHybi.GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\n\nvar instance = {\n  FIN:    0x80,\n  MASK:   0x80,\n  RSV1:   0x40,\n  RSV2:   0x20,\n  RSV3:   0x10,\n  OPCODE: 0x0F,\n  LENGTH: 0x7F,\n\n  OPCODES: {\n    continuation: 0,\n    text:         1,\n    binary:       2,\n    close:        8,\n    ping:         9,\n    pong:         10\n  },\n\n  OPCODE_CODES:    [0, 1, 2, 8, 9, 10],\n  MESSAGE_OPCODES: [0, 1, 2],\n  OPENING_OPCODES: [1, 2],\n\n  ERRORS: {\n    normal_closure:       1000,\n    going_away:           1001,\n    protocol_error:       1002,\n    unacceptable:         1003,\n    encoding_error:       1007,\n    policy_violation:     1008,\n    too_large:            1009,\n    extension_error:      1010,\n    unexpected_condition: 1011\n  },\n\n  ERROR_CODES:        [1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011],\n  DEFAULT_ERROR_CODE: 1000,\n  MIN_RESERVED_ERROR: 3000,\n  MAX_RESERVED_ERROR: 4999,\n\n  // http://www.w3.org/International/questions/qa-forms-utf-8.en.php\n  UTF8_MATCH: /^([\\x00-\\x7F]|[\\xC2-\\xDF][\\x80-\\xBF]|\\xE0[\\xA0-\\xBF][\\x80-\\xBF]|[\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2}|\\xED[\\x80-\\x9F][\\x80-\\xBF]|\\xF0[\\x90-\\xBF][\\x80-\\xBF]{2}|[\\xF1-\\xF3][\\x80-\\xBF]{3}|\\xF4[\\x80-\\x8F][\\x80-\\xBF]{2})*$/,\n\n  addExtension: function(extension) {\n    this._extensions.add(extension);\n    return true;\n  },\n\n  parse: function(chunk) {\n    this._reader.put(chunk);\n    var buffer = true;\n    while (buffer) {\n      switch (this._stage) {\n        case 0:\n          buffer = this._reader.read(1);\n          if (buffer) this._parseOpcode(buffer[0]);\n          break;\n\n        case 1:\n          buffer = this._reader.read(1);\n          if (buffer) this._parseLength(buffer[0]);\n          break;\n\n        case 2:\n          buffer = this._reader.read(this._frame.lengthBytes);\n          if (buffer) this._parseExtendedLength(buffer);\n          break;\n\n        case 3:\n          buffer = this._reader.read(4);\n          if (buffer) {\n            this._stage = 4;\n            this._frame.maskingKey = buffer;\n          }\n          break;\n\n        case 4:\n          buffer = this._reader.read(this._frame.length);\n          if (buffer) {\n            this._stage = 0;\n            this._emitFrame(buffer);\n          }\n          break;\n\n        default:\n          buffer = null;\n      }\n    }\n  },\n\n  text: function(message) {\n    if (this.readyState > 1) return false;\n    return this.frame(message, 'text');\n  },\n\n  binary: function(message) {\n    if (this.readyState > 1) return false;\n    return this.frame(message, 'binary');\n  },\n\n  ping: function(message, callback) {\n    if (this.readyState > 1) return false;\n    message = message || '';\n    if (callback) this._pingCallbacks[message] = callback;\n    return this.frame(message, 'ping');\n  },\n\n  pong: function(message) {\n      if (this.readyState > 1) return false;\n      message = message ||'';\n      return this.frame(message, 'pong');\n  },\n\n  close: function(reason, code) {\n    reason = reason || '';\n    code   = code   || this.ERRORS.normal_closure;\n\n    if (this.readyState <= 0) {\n      this.readyState = 3;\n      this.emit('close', new Base.CloseEvent(code, reason));\n      return true;\n    } else if (this.readyState === 1) {\n      this.readyState = 2;\n      this._extensions.close(function() { this.frame(reason, 'close', code) }, this);\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  frame: function(buffer, type, code) {\n    if (this.readyState <= 0) return this._queue([buffer, type, code]);\n    if (this.readyState > 2) return false;\n\n    if (buffer instanceof Array)    buffer = Buffer.from(buffer);\n    if (typeof buffer === 'number') buffer = buffer.toString();\n\n    var message = new Message(),\n        isText  = (typeof buffer === 'string'),\n        payload, copy;\n\n    message.rsv1   = message.rsv2 = message.rsv3 = false;\n    message.opcode = this.OPCODES[type || (isText ? 'text' : 'binary')];\n\n    payload = isText ? Buffer.from(buffer, 'utf8') : buffer;\n\n    if (code) {\n      copy = payload;\n      payload = Buffer.allocUnsafe(2 + copy.length);\n      payload.writeUInt16BE(code, 0);\n      copy.copy(payload, 2);\n    }\n    message.data = payload;\n\n    var onMessageReady = function(message) {\n      var frame = new Frame();\n\n      frame.final   = true;\n      frame.rsv1    = message.rsv1;\n      frame.rsv2    = message.rsv2;\n      frame.rsv3    = message.rsv3;\n      frame.opcode  = message.opcode;\n      frame.masked  = !!this._masking;\n      frame.length  = message.data.length;\n      frame.payload = message.data;\n\n      if (frame.masked) frame.maskingKey = crypto.randomBytes(4);\n\n      this._sendFrame(frame);\n    };\n\n    if (this.MESSAGE_OPCODES.indexOf(message.opcode) >= 0)\n      this._extensions.processOutgoingMessage(message, function(error, message) {\n        if (error) return this._fail('extension_error', error.message);\n        onMessageReady.call(this, message);\n      }, this);\n    else\n      onMessageReady.call(this, message);\n\n    return true;\n  },\n\n  _sendFrame: function(frame) {\n    var length = frame.length,\n        header = (length <= 125) ? 2 : (length <= 65535 ? 4 : 10),\n        offset = header + (frame.masked ? 4 : 0),\n        buffer = Buffer.allocUnsafe(offset + length),\n        masked = frame.masked ? this.MASK : 0;\n\n    buffer[0] = (frame.final ? this.FIN : 0) |\n                (frame.rsv1 ? this.RSV1 : 0) |\n                (frame.rsv2 ? this.RSV2 : 0) |\n                (frame.rsv3 ? this.RSV3 : 0) |\n                frame.opcode;\n\n    if (length <= 125) {\n      buffer[1] = masked | length;\n    } else if (length <= 65535) {\n      buffer[1] = masked | 126;\n      buffer.writeUInt16BE(length, 2);\n    } else {\n      buffer[1] = masked | 127;\n      buffer.writeUInt32BE(Math.floor(length / 0x100000000), 2);\n      buffer.writeUInt32BE(length % 0x100000000, 6);\n    }\n\n    frame.payload.copy(buffer, offset);\n\n    if (frame.masked) {\n      frame.maskingKey.copy(buffer, header);\n      Hybi.mask(buffer, frame.maskingKey, offset);\n    }\n\n    this._write(buffer);\n  },\n\n  _handshakeResponse: function() {\n    var secKey  = this._request.headers['sec-websocket-key'],\n        version = this._request.headers['sec-websocket-version'];\n\n    if (version !== Hybi.VERSION)\n      throw new Error('Unsupported WebSocket version: ' + version);\n\n    if (typeof secKey !== 'string')\n      throw new Error('Missing handshake request header: Sec-WebSocket-Key');\n\n    this._headers.set('Upgrade', 'websocket');\n    this._headers.set('Connection', 'Upgrade');\n    this._headers.set('Sec-WebSocket-Accept', Hybi.generateAccept(secKey));\n\n    if (this.protocol) this._headers.set('Sec-WebSocket-Protocol', this.protocol);\n\n    var extensions = this._extensions.generateResponse(this._request.headers['sec-websocket-extensions']);\n    if (extensions) this._headers.set('Sec-WebSocket-Extensions', extensions);\n\n    var start   = 'HTTP/1.1 101 Switching Protocols',\n        headers = [start, this._headers.toString(), ''];\n\n    return Buffer.from(headers.join('\\r\\n'), 'utf8');\n  },\n\n  _shutdown: function(code, reason, error) {\n    delete this._frame;\n    delete this._message;\n    this._stage = 5;\n\n    var sendCloseFrame = (this.readyState === 1);\n    this.readyState = 2;\n\n    this._extensions.close(function() {\n      if (sendCloseFrame) this.frame(reason, 'close', code);\n      this.readyState = 3;\n      if (error) this.emit('error', new Error(reason));\n      this.emit('close', new Base.CloseEvent(code, reason));\n    }, this);\n  },\n\n  _fail: function(type, message) {\n    if (this.readyState > 1) return;\n    this._shutdown(this.ERRORS[type], message, true);\n  },\n\n  _parseOpcode: function(octet) {\n    var rsvs = [this.RSV1, this.RSV2, this.RSV3].map(function(rsv) {\n      return (octet & rsv) === rsv;\n    });\n\n    var frame = this._frame = new Frame();\n\n    frame.final  = (octet & this.FIN) === this.FIN;\n    frame.rsv1   = rsvs[0];\n    frame.rsv2   = rsvs[1];\n    frame.rsv3   = rsvs[2];\n    frame.opcode = (octet & this.OPCODE);\n\n    this._stage = 1;\n\n    if (!this._extensions.validFrameRsv(frame))\n      return this._fail('protocol_error',\n          'One or more reserved bits are on: reserved1 = ' + (frame.rsv1 ? 1 : 0) +\n          ', reserved2 = ' + (frame.rsv2 ? 1 : 0) +\n          ', reserved3 = ' + (frame.rsv3 ? 1 : 0));\n\n    if (this.OPCODE_CODES.indexOf(frame.opcode) < 0)\n      return this._fail('protocol_error', 'Unrecognized frame opcode: ' + frame.opcode);\n\n    if (this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 && !frame.final)\n      return this._fail('protocol_error', 'Received fragmented control frame: opcode = ' + frame.opcode);\n\n    if (this._message && this.OPENING_OPCODES.indexOf(frame.opcode) >= 0)\n      return this._fail('protocol_error', 'Received new data frame but previous continuous frame is unfinished');\n  },\n\n  _parseLength: function(octet) {\n    var frame = this._frame;\n    frame.masked = (octet & this.MASK) === this.MASK;\n    frame.length = (octet & this.LENGTH);\n\n    if (frame.length >= 0 && frame.length <= 125) {\n      this._stage = frame.masked ? 3 : 4;\n      if (!this._checkFrameLength()) return;\n    } else {\n      this._stage = 2;\n      frame.lengthBytes = (frame.length === 126 ? 2 : 8);\n    }\n\n    if (this._requireMasking && !frame.masked)\n      return this._fail('unacceptable', 'Received unmasked frame but masking is required');\n  },\n\n  _parseExtendedLength: function(buffer) {\n    var frame = this._frame;\n    frame.length = this._readUInt(buffer);\n\n    this._stage = frame.masked ? 3 : 4;\n\n    if (this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 && frame.length > 125)\n      return this._fail('protocol_error', 'Received control frame having too long payload: ' + frame.length);\n\n    if (!this._checkFrameLength()) return;\n  },\n\n  _checkFrameLength: function() {\n    var length = this._message ? this._message.length : 0;\n\n    if (length + this._frame.length > this._maxLength) {\n      this._fail('too_large', 'WebSocket frame length too large');\n      return false;\n    } else {\n      return true;\n    }\n  },\n\n  _emitFrame: function(buffer) {\n    var frame   = this._frame,\n        payload = frame.payload = Hybi.mask(buffer, frame.maskingKey),\n        opcode  = frame.opcode,\n        message,\n        code, reason,\n        callbacks, callback;\n\n    delete this._frame;\n\n    if (opcode === this.OPCODES.continuation) {\n      if (!this._message) return this._fail('protocol_error', 'Received unexpected continuation frame');\n      this._message.pushFrame(frame);\n    }\n\n    if (opcode === this.OPCODES.text || opcode === this.OPCODES.binary) {\n      this._message = new Message();\n      this._message.pushFrame(frame);\n    }\n\n    if (frame.final && this.MESSAGE_OPCODES.indexOf(opcode) >= 0)\n      return this._emitMessage(this._message);\n\n    if (opcode === this.OPCODES.close) {\n      code   = (payload.length >= 2) ? payload.readUInt16BE(0) : null;\n      reason = (payload.length > 2) ? this._encode(payload.slice(2)) : null;\n\n      if (!(payload.length === 0) &&\n          !(code !== null && code >= this.MIN_RESERVED_ERROR && code <= this.MAX_RESERVED_ERROR) &&\n          this.ERROR_CODES.indexOf(code) < 0)\n        code = this.ERRORS.protocol_error;\n\n      if (payload.length > 125 || (payload.length > 2 && !reason))\n        code = this.ERRORS.protocol_error;\n\n      this._shutdown(code || this.DEFAULT_ERROR_CODE, reason || '');\n    }\n\n    if (opcode === this.OPCODES.ping) {\n      this.frame(payload, 'pong');\n      this.emit('ping', new Base.PingEvent(payload.toString()))\n    }\n\n    if (opcode === this.OPCODES.pong) {\n      callbacks = this._pingCallbacks;\n      message   = this._encode(payload);\n      callback  = callbacks[message];\n\n      delete callbacks[message];\n      if (callback) callback()\n\n      this.emit('pong', new Base.PongEvent(payload.toString()))\n    }\n  },\n\n  _emitMessage: function(message) {\n    var message = this._message;\n    message.read();\n\n    delete this._message;\n\n    this._extensions.processIncomingMessage(message, function(error, message) {\n      if (error) return this._fail('extension_error', error.message);\n\n      var payload = message.data;\n      if (message.opcode === this.OPCODES.text) payload = this._encode(payload);\n\n      if (payload === null)\n        return this._fail('encoding_error', 'Could not decode a text frame as UTF-8');\n      else\n        this.emit('message', new Base.MessageEvent(payload));\n    }, this);\n  },\n\n  _encode: function(buffer) {\n    try {\n      var string = buffer.toString('binary', 0, buffer.length);\n      if (!this.UTF8_MATCH.test(string)) return null;\n    } catch (e) {}\n    return buffer.toString('utf8', 0, buffer.length);\n  },\n\n  _readUInt: function(buffer) {\n    if (buffer.length === 2) return buffer.readUInt16BE(0);\n\n    return buffer.readUInt32BE(0) * 0x100000000 +\n           buffer.readUInt32BE(4);\n  }\n};\n\nfor (var key in instance)\n  Hybi.prototype[key] = instance[key];\n\nmodule.exports = Hybi;\n","'use strict';\n\nvar Buffer     = require('safe-buffer').Buffer,\n    Stream     = require('stream').Stream,\n    url        = require('url'),\n    util       = require('util'),\n    Base       = require('./base'),\n    Headers    = require('./headers'),\n    HttpParser = require('../http_parser');\n\nvar PORTS = { 'ws:': 80, 'wss:': 443 };\n\nvar Proxy = function(client, origin, options) {\n  this._client  = client;\n  this._http    = new HttpParser('response');\n  this._origin  = (typeof client.url === 'object') ? client.url : url.parse(client.url);\n  this._url     = (typeof origin === 'object') ? origin : url.parse(origin);\n  this._options = options || {};\n  this._state   = 0;\n\n  this.readable = this.writable = true;\n  this._paused  = false;\n\n  this._headers = new Headers();\n  this._headers.set('Host', this._origin.host);\n  this._headers.set('Connection', 'keep-alive');\n  this._headers.set('Proxy-Connection', 'keep-alive');\n\n  var auth = this._url.auth && Buffer.from(this._url.auth, 'utf8').toString('base64');\n  if (auth) this._headers.set('Proxy-Authorization', 'Basic ' + auth);\n};\nutil.inherits(Proxy, Stream);\n\nvar instance = {\n  setHeader: function(name, value) {\n    if (this._state !== 0) return false;\n    this._headers.set(name, value);\n    return true;\n  },\n\n  start: function() {\n    if (this._state !== 0) return false;\n    this._state = 1;\n\n    var origin = this._origin,\n        port   = origin.port || PORTS[origin.protocol],\n        start  = 'CONNECT ' + origin.hostname + ':' + port + ' HTTP/1.1';\n\n    var headers = [start, this._headers.toString(), ''];\n\n    this.emit('data', Buffer.from(headers.join('\\r\\n'), 'utf8'));\n    return true;\n  },\n\n  pause: function() {\n    this._paused = true;\n  },\n\n  resume: function() {\n    this._paused = false;\n    this.emit('drain');\n  },\n\n  write: function(chunk) {\n    if (!this.writable) return false;\n\n    this._http.parse(chunk);\n    if (!this._http.isComplete()) return !this._paused;\n\n    this.statusCode = this._http.statusCode;\n    this.headers    = this._http.headers;\n\n    if (this.statusCode === 200) {\n      this.emit('connect', new Base.ConnectEvent());\n    } else {\n      var message = \"Can't establish a connection to the server at \" + this._origin.href;\n      this.emit('error', new Error(message));\n    }\n    this.end();\n    return !this._paused;\n  },\n\n  end: function(chunk) {\n    if (!this.writable) return;\n    if (chunk !== undefined) this.write(chunk);\n    this.readable = this.writable = false;\n    this.emit('close');\n    this.emit('end');\n  },\n\n  destroy: function() {\n    this.end();\n  }\n};\n\nfor (var key in instance)\n  Proxy.prototype[key] = instance[key];\n\nmodule.exports = Proxy;\n","'use strict';\n\nvar Buffer     = require('safe-buffer').Buffer,\n    crypto     = require('crypto'),\n    url        = require('url'),\n    util       = require('util'),\n    HttpParser = require('../http_parser'),\n    Base       = require('./base'),\n    Hybi       = require('./hybi'),\n    Proxy      = require('./proxy');\n\nvar Client = function(_url, options) {\n  this.version = 'hybi-' + Hybi.VERSION;\n  Hybi.call(this, null, _url, options);\n\n  this.readyState = -1;\n  this._key       = Client.generateKey();\n  this._accept    = Hybi.generateAccept(this._key);\n  this._http      = new HttpParser('response');\n\n  var uri  = url.parse(this.url),\n      auth = uri.auth && Buffer.from(uri.auth, 'utf8').toString('base64');\n\n  if (this.VALID_PROTOCOLS.indexOf(uri.protocol) < 0)\n    throw new Error(this.url + ' is not a valid WebSocket URL');\n\n  this._pathname = (uri.pathname || '/') + (uri.search || '');\n\n  this._headers.set('Host', uri.host);\n  this._headers.set('Upgrade', 'websocket');\n  this._headers.set('Connection', 'Upgrade');\n  this._headers.set('Sec-WebSocket-Key', this._key);\n  this._headers.set('Sec-WebSocket-Version', Hybi.VERSION);\n\n  if (this._protocols.length > 0)\n    this._headers.set('Sec-WebSocket-Protocol', this._protocols.join(', '));\n\n  if (auth)\n    this._headers.set('Authorization', 'Basic ' + auth);\n};\nutil.inherits(Client, Hybi);\n\nClient.generateKey = function() {\n  return crypto.randomBytes(16).toString('base64');\n};\n\nvar instance = {\n  VALID_PROTOCOLS: ['ws:', 'wss:'],\n\n  proxy: function(origin, options) {\n    return new Proxy(this, origin, options);\n  },\n\n  start: function() {\n    if (this.readyState !== -1) return false;\n    this._write(this._handshakeRequest());\n    this.readyState = 0;\n    return true;\n  },\n\n  parse: function(chunk) {\n    if (this.readyState === 3) return;\n    if (this.readyState > 0) return Hybi.prototype.parse.call(this, chunk);\n\n    this._http.parse(chunk);\n    if (!this._http.isComplete()) return;\n\n    this._validateHandshake();\n    if (this.readyState === 3) return;\n\n    this._open();\n    this.parse(this._http.body);\n  },\n\n  _handshakeRequest: function() {\n    var extensions = this._extensions.generateOffer();\n    if (extensions)\n      this._headers.set('Sec-WebSocket-Extensions', extensions);\n\n    var start   = 'GET ' + this._pathname + ' HTTP/1.1',\n        headers = [start, this._headers.toString(), ''];\n\n    return Buffer.from(headers.join('\\r\\n'), 'utf8');\n  },\n\n  _failHandshake: function(message) {\n    message = 'Error during WebSocket handshake: ' + message;\n    this.readyState = 3;\n    this.emit('error', new Error(message));\n    this.emit('close', new Base.CloseEvent(this.ERRORS.protocol_error, message));\n  },\n\n  _validateHandshake: function() {\n    this.statusCode = this._http.statusCode;\n    this.headers    = this._http.headers;\n\n    if (this._http.error)\n      return this._failHandshake(this._http.error.message);\n\n    if (this._http.statusCode !== 101)\n      return this._failHandshake('Unexpected response code: ' + this._http.statusCode);\n\n    var headers    = this._http.headers,\n        upgrade    = headers['upgrade'] || '',\n        connection = headers['connection'] || '',\n        accept     = headers['sec-websocket-accept'] || '',\n        protocol   = headers['sec-websocket-protocol'] || '';\n\n    if (upgrade === '')\n      return this._failHandshake(\"'Upgrade' header is missing\");\n    if (upgrade.toLowerCase() !== 'websocket')\n      return this._failHandshake(\"'Upgrade' header value is not 'WebSocket'\");\n\n    if (connection === '')\n      return this._failHandshake(\"'Connection' header is missing\");\n    if (connection.toLowerCase() !== 'upgrade')\n      return this._failHandshake(\"'Connection' header value is not 'Upgrade'\");\n\n    if (accept !== this._accept)\n      return this._failHandshake('Sec-WebSocket-Accept mismatch');\n\n    this.protocol = null;\n\n    if (protocol !== '') {\n      if (this._protocols.indexOf(protocol) < 0)\n        return this._failHandshake('Sec-WebSocket-Protocol mismatch');\n      else\n        this.protocol = protocol;\n    }\n\n    try {\n      this._extensions.activate(this.headers['sec-websocket-extensions']);\n    } catch (e) {\n      return this._failHandshake(e.message);\n    }\n  }\n};\n\nfor (var key in instance)\n  Client.prototype[key] = instance[key];\n\nmodule.exports = Client;\n","'use strict';\n\nvar Buffer = require('safe-buffer').Buffer,\n    Base   = require('./base'),\n    util   = require('util');\n\nvar Draft75 = function(request, url, options) {\n  Base.apply(this, arguments);\n  this._stage  = 0;\n  this.version = 'hixie-75';\n\n  this._headers.set('Upgrade', 'WebSocket');\n  this._headers.set('Connection', 'Upgrade');\n  this._headers.set('WebSocket-Origin', this._request.headers.origin);\n  this._headers.set('WebSocket-Location', this.url);\n};\nutil.inherits(Draft75, Base);\n\nvar instance = {\n  close: function() {\n    if (this.readyState === 3) return false;\n    this.readyState = 3;\n    this.emit('close', new Base.CloseEvent(null, null));\n    return true;\n  },\n\n  parse: function(chunk) {\n    if (this.readyState > 1) return;\n\n    this._reader.put(chunk);\n\n    this._reader.eachByte(function(octet) {\n      var message;\n\n      switch (this._stage) {\n        case -1:\n          this._body.push(octet);\n          this._sendHandshakeBody();\n          break;\n\n        case 0:\n          this._parseLeadingByte(octet);\n          break;\n\n        case 1:\n          this._length = (octet & 0x7F) + 128 * this._length;\n\n          if (this._closing && this._length === 0) {\n            return this.close();\n          }\n          else if ((octet & 0x80) !== 0x80) {\n            if (this._length === 0) {\n              this._stage = 0;\n            }\n            else {\n              this._skipped = 0;\n              this._stage   = 2;\n            }\n          }\n          break;\n\n        case 2:\n          if (octet === 0xFF) {\n            this._stage = 0;\n            message = Buffer.from(this._buffer).toString('utf8', 0, this._buffer.length);\n            this.emit('message', new Base.MessageEvent(message));\n          }\n          else {\n            if (this._length) {\n              this._skipped += 1;\n              if (this._skipped === this._length)\n                this._stage = 0;\n            } else {\n              this._buffer.push(octet);\n              if (this._buffer.length > this._maxLength) return this.close();\n            }\n          }\n          break;\n      }\n    }, this);\n  },\n\n  frame: function(buffer) {\n    if (this.readyState === 0) return this._queue([buffer]);\n    if (this.readyState > 1) return false;\n\n    if (typeof buffer !== 'string') buffer = buffer.toString();\n\n    var length = Buffer.byteLength(buffer),\n        frame  = Buffer.allocUnsafe(length + 2);\n\n    frame[0] = 0x00;\n    frame.write(buffer, 1);\n    frame[frame.length - 1] = 0xFF;\n\n    this._write(frame);\n    return true;\n  },\n\n  _handshakeResponse: function() {\n    var start   = 'HTTP/1.1 101 Web Socket Protocol Handshake',\n        headers = [start, this._headers.toString(), ''];\n\n    return Buffer.from(headers.join('\\r\\n'), 'utf8');\n  },\n\n  _parseLeadingByte: function(octet) {\n    if ((octet & 0x80) === 0x80) {\n      this._length = 0;\n      this._stage  = 1;\n    } else {\n      delete this._length;\n      delete this._skipped;\n      this._buffer = [];\n      this._stage  = 2;\n    }\n  }\n};\n\nfor (var key in instance)\n  Draft75.prototype[key] = instance[key];\n\nmodule.exports = Draft75;\n","'use strict';\n\nvar Buffer  = require('safe-buffer').Buffer,\n    Base    = require('./base'),\n    Draft75 = require('./draft75'),\n    crypto  = require('crypto'),\n    util    = require('util');\n\n\nvar numberFromKey = function(key) {\n  return parseInt((key.match(/[0-9]/g) || []).join(''), 10);\n};\n\nvar spacesInKey = function(key) {\n  return (key.match(/ /g) || []).length;\n};\n\n\nvar Draft76 = function(request, url, options) {\n  Draft75.apply(this, arguments);\n  this._stage  = -1;\n  this._body   = [];\n  this.version = 'hixie-76';\n\n  this._headers.clear();\n\n  this._headers.set('Upgrade', 'WebSocket');\n  this._headers.set('Connection', 'Upgrade');\n  this._headers.set('Sec-WebSocket-Origin', this._request.headers.origin);\n  this._headers.set('Sec-WebSocket-Location', this.url);\n};\nutil.inherits(Draft76, Draft75);\n\nvar instance = {\n  BODY_SIZE: 8,\n\n  start: function() {\n    if (!Draft75.prototype.start.call(this)) return false;\n    this._started = true;\n    this._sendHandshakeBody();\n    return true;\n  },\n\n  close: function() {\n    if (this.readyState === 3) return false;\n    if (this.readyState === 1) this._write(Buffer.from([0xFF, 0x00]));\n    this.readyState = 3;\n    this.emit('close', new Base.CloseEvent(null, null));\n    return true;\n  },\n\n  _handshakeResponse: function() {\n    var headers = this._request.headers,\n        key1    = headers['sec-websocket-key1'],\n        key2    = headers['sec-websocket-key2'];\n\n    if (!key1) throw new Error('Missing required header: Sec-WebSocket-Key1');\n    if (!key2) throw new Error('Missing required header: Sec-WebSocket-Key2');\n\n    var number1 = numberFromKey(key1),\n        spaces1 = spacesInKey(key1),\n\n        number2 = numberFromKey(key2),\n        spaces2 = spacesInKey(key2);\n\n    if (number1 % spaces1 !== 0 || number2 % spaces2 !== 0)\n      throw new Error('Client sent invalid Sec-WebSocket-Key headers');\n\n    this._keyValues = [number1 / spaces1, number2 / spaces2];\n\n    var start   = 'HTTP/1.1 101 WebSocket Protocol Handshake',\n        headers = [start, this._headers.toString(), ''];\n\n    return Buffer.from(headers.join('\\r\\n'), 'binary');\n  },\n\n  _handshakeSignature: function() {\n    if (this._body.length < this.BODY_SIZE) return null;\n\n    var md5    = crypto.createHash('md5'),\n        buffer = Buffer.allocUnsafe(8 + this.BODY_SIZE);\n\n    buffer.writeUInt32BE(this._keyValues[0], 0);\n    buffer.writeUInt32BE(this._keyValues[1], 4);\n    Buffer.from(this._body).copy(buffer, 8, 0, this.BODY_SIZE);\n\n    md5.update(buffer);\n    return Buffer.from(md5.digest('binary'), 'binary');\n  },\n\n  _sendHandshakeBody: function() {\n    if (!this._started) return;\n    var signature = this._handshakeSignature();\n    if (!signature) return;\n\n    this._write(signature);\n    this._stage = 0;\n    this._open();\n\n    if (this._body.length > this.BODY_SIZE)\n      this.parse(this._body.slice(this.BODY_SIZE));\n  },\n\n  _parseLeadingByte: function(octet) {\n    if (octet !== 0xFF)\n      return Draft75.prototype._parseLeadingByte.call(this, octet);\n\n    this._closing = true;\n    this._length  = 0;\n    this._stage   = 1;\n  }\n};\n\nfor (var key in instance)\n  Draft76.prototype[key] = instance[key];\n\nmodule.exports = Draft76;\n","'use strict';\n\nvar util       = require('util'),\n    HttpParser = require('../http_parser'),\n    Base       = require('./base'),\n    Draft75    = require('./draft75'),\n    Draft76    = require('./draft76'),\n    Hybi       = require('./hybi');\n\nvar Server = function(options) {\n  Base.call(this, null, null, options);\n  this._http = new HttpParser('request');\n};\nutil.inherits(Server, Base);\n\nvar instance = {\n  EVENTS: ['open', 'message', 'error', 'close', 'ping', 'pong'],\n\n  _bindEventListeners: function() {\n    this.messages.on('error', function() {});\n    this.on('error', function() {});\n  },\n\n  parse: function(chunk) {\n    if (this._delegate) return this._delegate.parse(chunk);\n\n    this._http.parse(chunk);\n    if (!this._http.isComplete()) return;\n\n    this.method  = this._http.method;\n    this.url     = this._http.url;\n    this.headers = this._http.headers;\n    this.body    = this._http.body;\n\n    var self = this;\n    this._delegate = Server.http(this, this._options);\n    this._delegate.messages = this.messages;\n    this._delegate.io = this.io;\n    this._open();\n\n    this.EVENTS.forEach(function(event) {\n      this._delegate.on(event, function(e) { self.emit(event, e) });\n    }, this);\n\n    this.protocol = this._delegate.protocol;\n    this.version  = this._delegate.version;\n\n    this.parse(this._http.body);\n    this.emit('connect', new Base.ConnectEvent());\n  },\n\n  _open: function() {\n    this.__queue.forEach(function(msg) {\n      this._delegate[msg[0]].apply(this._delegate, msg[1]);\n    }, this);\n    this.__queue = [];\n  }\n};\n\n['addExtension', 'setHeader', 'start', 'frame', 'text', 'binary', 'ping', 'close'].forEach(function(method) {\n  instance[method] = function() {\n    if (this._delegate) {\n      return this._delegate[method].apply(this._delegate, arguments);\n    } else {\n      this.__queue.push([method, arguments]);\n      return true;\n    }\n  };\n});\n\nfor (var key in instance)\n  Server.prototype[key] = instance[key];\n\nServer.isSecureRequest = function(request) {\n  if (request.connection && request.connection.authorized !== undefined) return true;\n  if (request.socket && request.socket.secure) return true;\n\n  var headers = request.headers;\n  if (!headers) return false;\n  if (headers['https'] === 'on') return true;\n  if (headers['x-forwarded-ssl'] === 'on') return true;\n  if (headers['x-forwarded-scheme'] === 'https') return true;\n  if (headers['x-forwarded-proto'] === 'https') return true;\n\n  return false;\n};\n\nServer.determineUrl = function(request) {\n  var scheme = this.isSecureRequest(request) ? 'wss:' : 'ws:';\n  return scheme + '//' + request.headers.host + request.url;\n};\n\nServer.http = function(request, options) {\n  options = options || {};\n  if (options.requireMasking === undefined) options.requireMasking = true;\n\n  var headers = request.headers,\n      version = headers['sec-websocket-version'],\n      key     = headers['sec-websocket-key'],\n      key1    = headers['sec-websocket-key1'],\n      key2    = headers['sec-websocket-key2'],\n      url     = this.determineUrl(request);\n\n  if (version || key)\n    return new Hybi(request, url, options);\n  else if (key1 || key2)\n    return new Draft76(request, url, options);\n  else\n    return new Draft75(request, url, options);\n};\n\nmodule.exports = Server;\n","'use strict';\n\n// Protocol references:\n//\n// * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\n// * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\n// * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17\n\nvar Base   = require('./driver/base'),\n    Client = require('./driver/client'),\n    Server = require('./driver/server');\n\nvar Driver = {\n  client: function(url, options) {\n    options = options || {};\n    if (options.masking === undefined) options.masking = true;\n    return new Client(url, options);\n  },\n\n  server: function(options) {\n    options = options || {};\n    if (options.requireMasking === undefined) options.requireMasking = true;\n    return new Server(options);\n  },\n\n  http: function() {\n    return Server.http.apply(Server, arguments);\n  },\n\n  isSecureRequest: function(request) {\n    return Server.isSecureRequest(request);\n  },\n\n  isWebSocket: function(request) {\n    return Base.isWebSocket(request);\n  },\n\n  validateOptions: function(options, validKeys) {\n    Base.validateOptions(options, validKeys);\n  }\n};\n\nmodule.exports = Driver;\n","'use strict';\n\nvar Event = function(eventType, options) {\n  this.type = eventType;\n  for (var key in options)\n    this[key] = options[key];\n};\n\nEvent.prototype.initEvent = function(eventType, canBubble, cancelable) {\n  this.type       = eventType;\n  this.bubbles    = canBubble;\n  this.cancelable = cancelable;\n};\n\nEvent.prototype.stopPropagation = function() {};\nEvent.prototype.preventDefault  = function() {};\n\nEvent.CAPTURING_PHASE = 1;\nEvent.AT_TARGET       = 2;\nEvent.BUBBLING_PHASE  = 3;\n\nmodule.exports = Event;\n","'use strict';\n\nvar Event = require('./event');\n\nvar EventTarget = {\n  onopen:     null,\n  onmessage:  null,\n  onerror:    null,\n  onclose:    null,\n\n  addEventListener: function(eventType, listener, useCapture) {\n    this.on(eventType, listener);\n  },\n\n  removeEventListener: function(eventType, listener, useCapture) {\n    this.removeListener(eventType, listener);\n  },\n\n  dispatchEvent: function(event) {\n    event.target = event.currentTarget = this;\n    event.eventPhase = Event.AT_TARGET;\n\n    if (this['on' + event.type])\n      this['on' + event.type](event);\n\n    this.emit(event.type, event);\n  }\n};\n\nmodule.exports = EventTarget;\n","'use strict';\n\nvar Stream      = require('stream').Stream,\n    util        = require('util'),\n    driver      = require('websocket-driver'),\n    EventTarget = require('./api/event_target'),\n    Event       = require('./api/event');\n\nvar API = function(options) {\n  options = options || {};\n  driver.validateOptions(options, ['headers', 'extensions', 'maxLength', 'ping', 'proxy', 'tls', 'ca']);\n\n  this.readable = this.writable = true;\n\n  var headers = options.headers;\n  if (headers) {\n    for (var name in headers) this._driver.setHeader(name, headers[name]);\n  }\n\n  var extensions = options.extensions;\n  if (extensions) {\n    [].concat(extensions).forEach(this._driver.addExtension, this._driver);\n  }\n\n  this._ping          = options.ping;\n  this._pingId        = 0;\n  this.readyState     = API.CONNECTING;\n  this.bufferedAmount = 0;\n  this.protocol       = '';\n  this.url            = this._driver.url;\n  this.version        = this._driver.version;\n\n  var self = this;\n\n  this._driver.on('open',    function(e) { self._open() });\n  this._driver.on('message', function(e) { self._receiveMessage(e.data) });\n  this._driver.on('close',   function(e) { self._beginClose(e.reason, e.code) });\n\n  this._driver.on('error', function(error) {\n    self._emitError(error.message);\n  });\n  this.on('error', function() {});\n\n  this._driver.messages.on('drain', function() {\n    self.emit('drain');\n  });\n\n  if (this._ping)\n    this._pingTimer = setInterval(function() {\n      self._pingId += 1;\n      self.ping(self._pingId.toString());\n    }, this._ping * 1000);\n\n  this._configureStream();\n\n  if (!this._proxy) {\n    this._stream.pipe(this._driver.io);\n    this._driver.io.pipe(this._stream);\n  }\n};\nutil.inherits(API, Stream);\n\nAPI.CONNECTING = 0;\nAPI.OPEN       = 1;\nAPI.CLOSING    = 2;\nAPI.CLOSED     = 3;\n\nAPI.CLOSE_TIMEOUT = 30000;\n\nvar instance = {\n  write: function(data) {\n    return this.send(data);\n  },\n\n  end: function(data) {\n    if (data !== undefined) this.send(data);\n    this.close();\n  },\n\n  pause: function() {\n    return this._driver.messages.pause();\n  },\n\n  resume: function() {\n    return this._driver.messages.resume();\n  },\n\n  send: function(data) {\n    if (this.readyState > API.OPEN) return false;\n    if (!(data instanceof Buffer)) data = String(data);\n    return this._driver.messages.write(data);\n  },\n\n  ping: function(message, callback) {\n    if (this.readyState > API.OPEN) return false;\n    return this._driver.ping(message, callback);\n  },\n\n  close: function(code, reason) {\n    if (code === undefined) code = 1000;\n    if (reason === undefined) reason = '';\n\n    if (code !== 1000 && (code < 3000 || code > 4999))\n      throw new Error(\"Failed to execute 'close' on WebSocket: \" +\n                      \"The code must be either 1000, or between 3000 and 4999. \" +\n                      code + \" is neither.\");\n\n    if (this.readyState < API.CLOSING) {\n      var self = this;\n      this._closeTimer = setTimeout(function() {\n        self._beginClose('', 1006);\n      }, API.CLOSE_TIMEOUT);\n    }\n\n    if (this.readyState !== API.CLOSED) this.readyState = API.CLOSING;\n\n    this._driver.close(reason, code);\n  },\n\n  _configureStream: function() {\n    var self = this;\n\n    this._stream.setTimeout(0);\n    this._stream.setNoDelay(true);\n\n    ['close', 'end'].forEach(function(event) {\n      this._stream.on(event, function() { self._finalizeClose() });\n    }, this);\n\n    this._stream.on('error', function(error) {\n      self._emitError('Network error: ' + self.url + ': ' + error.message);\n      self._finalizeClose();\n    });\n  },\n\n  _open: function() {\n    if (this.readyState !== API.CONNECTING) return;\n\n    this.readyState = API.OPEN;\n    this.protocol = this._driver.protocol || '';\n\n    var event = new Event('open');\n    event.initEvent('open', false, false);\n    this.dispatchEvent(event);\n  },\n\n  _receiveMessage: function(data) {\n    if (this.readyState > API.OPEN) return false;\n\n    if (this.readable) this.emit('data', data);\n\n    var event = new Event('message', { data: data });\n    event.initEvent('message', false, false);\n    this.dispatchEvent(event);\n  },\n\n  _emitError: function(message) {\n    if (this.readyState >= API.CLOSING) return;\n\n    var event = new Event('error', { message: message });\n    event.initEvent('error', false, false);\n    this.dispatchEvent(event);\n  },\n\n  _beginClose: function(reason, code) {\n    if (this.readyState === API.CLOSED) return;\n    this.readyState = API.CLOSING;\n    this._closeParams = [reason, code];\n\n    if (this._stream) {\n      this._stream.destroy();\n      if (!this._stream.readable) this._finalizeClose();\n    }\n  },\n\n  _finalizeClose: function() {\n    if (this.readyState === API.CLOSED) return;\n    this.readyState = API.CLOSED;\n\n    if (this._closeTimer) clearTimeout(this._closeTimer);\n    if (this._pingTimer) clearInterval(this._pingTimer);\n    if (this._stream) this._stream.end();\n\n    if (this.readable) this.emit('end');\n    this.readable = this.writable = false;\n\n    var reason = this._closeParams ? this._closeParams[0] : '',\n        code   = this._closeParams ? this._closeParams[1] : 1006;\n\n    var event = new Event('close', { code: code, reason: reason });\n    event.initEvent('close', false, false);\n    this.dispatchEvent(event);\n  }\n};\n\nfor (var method in instance) API.prototype[method] = instance[method];\nfor (var key in EventTarget) API.prototype[key] = EventTarget[key];\n\nmodule.exports = API;\n","'use strict';\n\nvar util   = require('util'),\n    net    = require('net'),\n    tls    = require('tls'),\n    url    = require('url'),\n    driver = require('websocket-driver'),\n    API    = require('./api'),\n    Event  = require('./api/event');\n\nvar DEFAULT_PORTS    = { 'http:': 80, 'https:': 443, 'ws:':80, 'wss:': 443 },\n    SECURE_PROTOCOLS = ['https:', 'wss:'];\n\nvar Client = function(_url, protocols, options) {\n  options = options || {};\n\n  this.url     = _url;\n  this._driver = driver.client(this.url, { maxLength: options.maxLength, protocols: protocols });\n\n  ['open', 'error'].forEach(function(event) {\n    this._driver.on(event, function() {\n      self.headers    = self._driver.headers;\n      self.statusCode = self._driver.statusCode;\n    });\n  }, this);\n\n  var proxy      = options.proxy || {},\n      endpoint   = url.parse(proxy.origin || this.url),\n      port       = endpoint.port || DEFAULT_PORTS[endpoint.protocol],\n      secure     = SECURE_PROTOCOLS.indexOf(endpoint.protocol) >= 0,\n      onConnect  = function() { self._onConnect() },\n      netOptions = options.net || {},\n      originTLS  = options.tls || {},\n      socketTLS  = proxy.origin ? (proxy.tls || {}) : originTLS,\n      self       = this;\n\n  netOptions.host = socketTLS.host = endpoint.hostname;\n  netOptions.port = socketTLS.port = port;\n\n  originTLS.ca = originTLS.ca || options.ca;\n  socketTLS.servername = socketTLS.servername || endpoint.hostname;\n\n  this._stream = secure\n               ? tls.connect(socketTLS, onConnect)\n               : net.connect(netOptions, onConnect);\n\n  if (proxy.origin) this._configureProxy(proxy, originTLS);\n\n  API.call(this, options);\n};\nutil.inherits(Client, API);\n\nClient.prototype._onConnect = function() {\n  var worker = this._proxy || this._driver;\n  worker.start();\n};\n\nClient.prototype._configureProxy = function(proxy, originTLS) {\n  var uri    = url.parse(this.url),\n      secure = SECURE_PROTOCOLS.indexOf(uri.protocol) >= 0,\n      self   = this,\n      name;\n\n  this._proxy = this._driver.proxy(proxy.origin);\n\n  if (proxy.headers) {\n    for (name in proxy.headers) this._proxy.setHeader(name, proxy.headers[name]);\n  }\n\n  this._proxy.pipe(this._stream, { end: false });\n  this._stream.pipe(this._proxy);\n\n  this._proxy.on('connect', function() {\n    if (secure) {\n      var options = { socket: self._stream, servername: uri.hostname };\n      for (name in originTLS) options[name] = originTLS[name];\n      self._stream = tls.connect(options);\n      self._configureStream();\n    }\n    self._driver.io.pipe(self._stream);\n    self._stream.pipe(self._driver.io);\n    self._driver.start();\n  });\n\n  this._proxy.on('error', function(error) {\n    self._driver.emit('error', error);\n  });\n};\n\nmodule.exports = Client;\n","'use strict';\n\nvar Stream      = require('stream').Stream,\n    util        = require('util'),\n    driver      = require('websocket-driver'),\n    Headers     = require('websocket-driver/lib/websocket/driver/headers'),\n    API         = require('./websocket/api'),\n    EventTarget = require('./websocket/api/event_target'),\n    Event       = require('./websocket/api/event');\n\nvar EventSource = function(request, response, options) {\n  this.writable = true;\n  options = options || {};\n\n  this._stream = response.socket;\n  this._ping   = options.ping  || this.DEFAULT_PING;\n  this._retry  = options.retry || this.DEFAULT_RETRY;\n\n  var scheme       = driver.isSecureRequest(request) ? 'https:' : 'http:';\n  this.url         = scheme + '//' + request.headers.host + request.url;\n  this.lastEventId = request.headers['last-event-id'] || '';\n  this.readyState  = API.CONNECTING;\n\n  var headers = new Headers(),\n      self    = this;\n\n  if (options.headers) {\n    for (var key in options.headers) headers.set(key, options.headers[key]);\n  }\n\n  if (!this._stream || !this._stream.writable) return;\n  process.nextTick(function() { self._open() });\n\n  this._stream.setTimeout(0);\n  this._stream.setNoDelay(true);\n\n  var handshake = 'HTTP/1.1 200 OK\\r\\n' +\n                  'Content-Type: text/event-stream\\r\\n' +\n                  'Cache-Control: no-cache, no-store\\r\\n' +\n                  'Connection: close\\r\\n' +\n                  headers.toString() +\n                  '\\r\\n' +\n                  'retry: ' + Math.floor(this._retry * 1000) + '\\r\\n\\r\\n';\n\n  this._write(handshake);\n\n  this._stream.on('drain', function() { self.emit('drain') });\n\n  if (this._ping)\n    this._pingTimer = setInterval(function() { self.ping() }, this._ping * 1000);\n\n  ['error', 'end'].forEach(function(event) {\n    self._stream.on(event, function() { self.close() });\n  });\n};\nutil.inherits(EventSource, Stream);\n\nEventSource.isEventSource = function(request) {\n  if (request.method !== 'GET') return false;\n  var accept = (request.headers.accept || '').split(/\\s*,\\s*/);\n  return accept.indexOf('text/event-stream') >= 0;\n};\n\nvar instance = {\n  DEFAULT_PING:   10,\n  DEFAULT_RETRY:  5,\n\n  _write: function(chunk) {\n    if (!this.writable) return false;\n    try {\n      return this._stream.write(chunk, 'utf8');\n    } catch (e) {\n      return false;\n    }\n  },\n\n  _open: function() {\n    if (this.readyState !== API.CONNECTING) return;\n\n    this.readyState = API.OPEN;\n\n    var event = new Event('open');\n    event.initEvent('open', false, false);\n    this.dispatchEvent(event);\n  },\n\n  write: function(message) {\n    return this.send(message);\n  },\n\n  end: function(message) {\n    if (message !== undefined) this.write(message);\n    this.close();\n  },\n\n  send: function(message, options) {\n    if (this.readyState > API.OPEN) return false;\n\n    message = String(message).replace(/(\\r\\n|\\r|\\n)/g, '$1data: ');\n    options = options || {};\n\n    var frame = '';\n    if (options.event) frame += 'event: ' + options.event + '\\r\\n';\n    if (options.id)    frame += 'id: '    + options.id    + '\\r\\n';\n    frame += 'data: ' + message + '\\r\\n\\r\\n';\n\n    return this._write(frame);\n  },\n\n  ping: function() {\n    return this._write(':\\r\\n\\r\\n');\n  },\n\n  close: function() {\n    if (this.readyState > API.OPEN) return false;\n\n    this.readyState = API.CLOSED;\n    this.writable = false;\n    if (this._pingTimer) clearInterval(this._pingTimer);\n    if (this._stream) this._stream.end();\n\n    var event = new Event('close');\n    event.initEvent('close', false, false);\n    this.dispatchEvent(event);\n\n    return true;\n  }\n};\n\nfor (var method in instance) EventSource.prototype[method] = instance[method];\nfor (var key in EventTarget) EventSource.prototype[key] = EventTarget[key];\n\nmodule.exports = EventSource;\n","// API references:\n//\n// * https://html.spec.whatwg.org/multipage/comms.html#network\n// * https://dom.spec.whatwg.org/#interface-eventtarget\n// * https://dom.spec.whatwg.org/#interface-event\n\n'use strict';\n\nvar util   = require('util'),\n    driver = require('websocket-driver'),\n    API    = require('./websocket/api');\n\nvar WebSocket = function(request, socket, body, protocols, options) {\n  options = options || {};\n\n  this._stream = socket;\n  this._driver = driver.http(request, { maxLength: options.maxLength, protocols: protocols });\n\n  var self = this;\n  if (!this._stream || !this._stream.writable) return;\n  if (!this._stream.readable) return this._stream.end();\n\n  var catchup = function() { self._stream.removeListener('data', catchup) };\n  this._stream.on('data', catchup);\n\n  API.call(this, options);\n\n  process.nextTick(function() {\n    self._driver.start();\n    self._driver.io.write(body);\n  });\n};\nutil.inherits(WebSocket, API);\n\nWebSocket.isWebSocket = function(request) {\n  return driver.isWebSocket(request);\n};\n\nWebSocket.validateOptions = function(options, validKeys) {\n  driver.validateOptions(options, validKeys);\n};\n\nWebSocket.WebSocket   = WebSocket;\nWebSocket.Client      = require('./websocket/client');\nWebSocket.EventSource = require('./eventsource');\n\nmodule.exports        = WebSocket;\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar component = require('@firebase/component');\nvar logger$1 = require('@firebase/logger');\nvar util = require('@firebase/util');\nvar idb = require('idb');\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass PlatformLoggerServiceImpl {\n    constructor(container) {\n        this.container = container;\n    }\n    // In initial implementation, this will be called by installations on\n    // auth token refresh, and installations will send this string.\n    getPlatformInfoString() {\n        const providers = this.container.getProviders();\n        // Loop through providers and get library/version pairs from any that are\n        // version components.\n        return providers\n            .map(provider => {\n            if (isVersionServiceProvider(provider)) {\n                const service = provider.getImmediate();\n                return `${service.library}/${service.version}`;\n            }\n            else {\n                return null;\n            }\n        })\n            .filter(logString => logString)\n            .join(' ');\n    }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider) {\n    const component = provider.getComponent();\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\n}\n\nconst name$q = \"@firebase/app\";\nconst version$1 = \"0.13.0\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logger = new logger$1.Logger('@firebase/app');\n\nconst name$p = \"@firebase/app-compat\";\n\nconst name$o = \"@firebase/analytics-compat\";\n\nconst name$n = \"@firebase/analytics\";\n\nconst name$m = \"@firebase/app-check-compat\";\n\nconst name$l = \"@firebase/app-check\";\n\nconst name$k = \"@firebase/auth\";\n\nconst name$j = \"@firebase/auth-compat\";\n\nconst name$i = \"@firebase/database\";\n\nconst name$h = \"@firebase/data-connect\";\n\nconst name$g = \"@firebase/database-compat\";\n\nconst name$f = \"@firebase/functions\";\n\nconst name$e = \"@firebase/functions-compat\";\n\nconst name$d = \"@firebase/installations\";\n\nconst name$c = \"@firebase/installations-compat\";\n\nconst name$b = \"@firebase/messagi